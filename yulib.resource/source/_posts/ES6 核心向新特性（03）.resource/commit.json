{"compress":true,"commitItems":[["48ea7ea8-944c-4cbc-b9f0-0c62fc8fa0bc",1558699055362,"---\ntitle: ES6 核心向新特性（03）\ndate: 2018-03-09 18:11:10\ntags: [JavaScript, ES6]\n---\n## Promise\nPromise 是异步编程的一种解决方案，用来避免异步操作函数里的多层嵌套回调（callback）问题。Promise 代表一个异步操作的执行返回状态，这个执行回状态在 Promise 对象创建时是未知的，它允许为异步操作的成功或失败指定处理方法。\n### 基本用法\n通常 Promise 的状态有三种：Fulfilled 状态表示执行成功；Rejected 状态表示执行失败；Pending 状态表示正在执行中。\n```js\nlet status = 1;\nlet promise = new Promise(function(resolve, reject) {\n  if(status === 1) {\n    resolve('Fulfilled');\n  } else {\n    reject('Rejected');\n  }\n});\nPromise.then(function(msg) {\n  console.log('success1:' + msg);\n  return msg;\n}, function(msg) {\n  console.log('fail1:' + msg);\n  return msg;\n}).then(function(msg) {\n  console.log('success2:' + msg);\n}, function(msg) {\n  console.log('fail2:' + msg);\n});\n// success1: Fulfilled\n// success2: Fulfilled\n```\npromise 的 then 方法接受两个处理函数，当 status 为 1 时执行 Fulfilled 成功调用，否则 Rejected 失败调用。返回的状态给第二个 then 方法处理。then 方法可以将传入参数的返回值一直传递下去，如果是异步的场景，就可以用这种方式来解决多层回调嵌套的问题了。\n### 用 promise 处理异步场景\n```js\n// 希望它依次异步输出 A B C D\nlet promise = new Promise(function(resolve) {\n  setTimeout(function() {\n    console.log('A');\n    resolve();\n  }, 3000); // 延迟3秒打印A\n});\n// 使用 then 来链式处理流程\npromise.then(function() {\n  return new Promise(function(resolve, reject) {\n    setTimeout(function() {\n      console.log('B');\n      resolve();\n    }, 2000); // 延迟2秒打印B\n  });\n}).then(function() {\n  return new Promise(function(resolve, reject) {\n    setTimeout(function() {\n      console.log('C');\n      resolve();\n    }, 1000); // 延迟1秒打印C\n  });\n}).then(function() {\n  return new Promise(function(resolve, reject) {\n    console.log('D');  // 不延迟打印D\n  });\n});\n```\n通过在不同的 then 处理方法中返回一个新的 promise 来解决。返回新的 promise 里面具有`resolve()`和`reject()`方法，只有当它的 resolve 或 reject 被调用时，promise 方法才会继续执行，进入下一个 then 方法中操作。设置在异步函数完成的最后调用`resolve()`就可以有效控制 promise 进入下一个 then 方法执行。\n## Symbol\nSymbol 是除布尔值、数值等六种数据类型外的第七种数据类型。属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。\n```js\nlet object = {};\nlet name = Symbol();\nlet family = Symbol();\n\nobject[name] = 'ouven';\nobject[family] = 'zhang';\n\nconsole.log(object);\n// {\n//   Symbol(): 'ouven',\n//   Symbol(): 'zhang',\n// }\nconsole.log(typeof name); // symbol\n```\n## Proxy\nProxy 可以用来拦截某个对象的属性访问方法，然后重载对象的`.`运算符。\n```js\nlet object = new Proxy({}, {\n  get: function(target, key, receiver) {\n    console.log(`getting ${key}`);\n    return Reflect.get(target, key, receiver);\n  },\n  set: function(target, key, value, receiver) {\n    console.log(`setting ${key}`);\n    return Reflect.set(target, key, value, receiver);\n  }\n});\n\n// 赋值或定义值都会输出\n// getting value\n// setting value\nobject['value'] = 3;\n```\n上面代码对一个空对象架设了一层拦截，重定义了属性的读取（get）和设置（set）行为。 \n▼ **基本用法**\n```js\nvar proxy = new Proxy(target, handler);\n```\n`target`参数表示所要拦截的目标对象，`handler`参数也是一个对象，用来定制拦截行为。\n* `get(target, propKey, receiver)`: 拦截对象属性的读取，如`proxy.foo`和`proxy['foo']`\n* `set(target, proKey, value, receiver)`: 拦截对象属性的设置，如`proxy.foo = v`和`proxy['foo'] = v`\n* ......\n\n## 统一码\nes6 字符串支持新的 Unicode 文本形式，同时也增加了新的正则表达式修饰符`u`来处理统一码。尽管如此，在实际的开发中，这样处理仍会降低程序可读性和处理速度，所以目前不建议使用。\n\n## 进制数支持\nes6 增加了对二进制（b）和八进制（o）数字面量的支持。\n```js\n0b111110111 === 503 // true\n0o767 === 503 // true\n```\n\n## Reflect\nReflect 可以理解为原有对象上的一个引用代理，它用于对原有对象进行赋值或取值操作，但不会触发对象属性的 getter 或 setter 调用，而直接使用 = 对对象进行赋值或取值操作会自动触发 getter 或 setter 方法。\n\n## tail calls 尾调用\ntail calls 尾调用保证了函数尾部调用时调用栈有一定的长度限制，这使得递归函数即使在没有限制输入时也能保证安全性而避免发生错误。\n```js\nfunction factorial(n, start = 1) {\n  if(n < = 1) {\n    return start;    \n  }\n  return factorial(n - 1, n * start);\n}\n// 默认情况下会发生栈溢出，但是在 es6 中是可以安全执行的\nfactorial(100000);\n```\n▼ **基本概念**\n尾调用是指某个函数的最后一步是调用另一个函数。递归非常耗费内存，因为需要同时保存成千上百个调用记录，很容易发生\"栈溢出\"错误（stack overflow）。但对于尾递归来说，由于只存在一个调用记录，所以永远不会发生\"栈溢出\"错误。\n▼ **注意点**\n尾递归的实现，往往需要改写递归函数，确保最后一步只调用自身。做到这一点的方法，就是把所有用到的内部变量改写成函数的参数。\n\n学习参考：\n[ECMAScript 6入门——阮一峰](http://es6.ruanyifeng.com/)\n[尾调用优化](http://www.ruanyifeng.com/blog/2015/04/tail-call.html)\n《现代前端技术解析》",[[1558699053750,["70431@DESKTOP-QB0HG1K",[[1,216,"\n"]],[215,215],[216,216]]],[1558699054047,["70431@DESKTOP-QB0HG1K",[[1,217,"\n"]],[216,216],[217,217]]],[1558699054499,["70431@DESKTOP-QB0HG1K",[[1,217,"<!-- more -->"]],[217,217],[230,230]]],[1558699054699,["70431@DESKTOP-QB0HG1K",[[1,231,"\n"]],[230,230],[231,231]]]],null,"70431@DESKTOP-QB0HG1K"],["6f5b2570-53ba-4bf2-87c6-1d40fb95ad22",1558699963373,"---\ntitle: ES6 核心向新特性（03）\ndate: 2018-03-09 18:11:10\ntags: [JavaScript, ES6]\n---\n## Promise\nPromise 是异步编程的一种解决方案，用来避免异步操作函数里的多层嵌套回调（callback）问题。Promise 代表一个异步操作的执行返回状态，这个执行回状态在 Promise 对象创建时是未知的，它允许为异步操作的成功或失败指定处理方法。\n\n<!-- more -->\n\n### 基本用法\n通常 Promise 的状态有三种：Fulfilled 状态表示执行成功；Rejected 状态表示执行失败；Pending 状态表示正在执行中。\n```js\nlet status = 1;\nlet promise = new Promise(function(resolve, reject) {\n  if(status === 1) {\n    resolve('Fulfilled');\n  } else {\n    reject('Rejected');\n  }\n});\nPromise.then(function(msg) {\n  console.log('success1:' + msg);\n  return msg;\n}, function(msg) {\n  console.log('fail1:' + msg);\n  return msg;\n}).then(function(msg) {\n  console.log('success2:' + msg);\n}, function(msg) {\n  console.log('fail2:' + msg);\n});\n// success1: Fulfilled\n// success2: Fulfilled\n```\npromise 的 then 方法接受两个处理函数，当 status 为 1 时执行 Fulfilled 成功调用，否则 Rejected 失败调用。返回的状态给第二个 then 方法处理。then 方法可以将传入参数的返回值一直传递下去，如果是异步的场景，就可以用这种方式来解决多层回调嵌套的问题了。\n### 用 promise 处理异步场景\n```js\n// 希望它依次异步输出 A B C D\nlet promise = new Promise(function(resolve) {\n  setTimeout(function() {\n    console.log('A');\n    resolve();\n  }, 3000); // 延迟3秒打印A\n});\n// 使用 then 来链式处理流程\npromise.then(function() {\n  return new Promise(function(resolve, reject) {\n    setTimeout(function() {\n      console.log('B');\n      resolve();\n    }, 2000); // 延迟2秒打印B\n  });\n}).then(function() {\n  return new Promise(function(resolve, reject) {\n    setTimeout(function() {\n      console.log('C');\n      resolve();\n    }, 1000); // 延迟1秒打印C\n  });\n}).then(function() {\n  return new Promise(function(resolve, reject) {\n    console.log('D');  // 不延迟打印D\n  });\n});\n```\n通过在不同的 then 处理方法中返回一个新的 promise 来解决。返回新的 promise 里面具有`resolve()`和`reject()`方法，只有当它的 resolve 或 reject 被调用时，promise 方法才会继续执行，进入下一个 then 方法中操作。设置在异步函数完成的最后调用`resolve()`就可以有效控制 promise 进入下一个 then 方法执行。\n## Symbol\nSymbol 是除布尔值、数值等六种数据类型外的第七种数据类型。属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。\n```js\nlet object = {};\nlet name = Symbol();\nlet family = Symbol();\n\nobject[name] = 'ouven';\nobject[family] = 'zhang';\n\nconsole.log(object);\n// {\n//   Symbol(): 'ouven',\n//   Symbol(): 'zhang',\n// }\nconsole.log(typeof name); // symbol\n```\n## Proxy\nProxy 可以用来拦截某个对象的属性访问方法，然后重载对象的`.`运算符。\n```js\nlet object = new Proxy({}, {\n  get: function(target, key, receiver) {\n    console.log(`getting ${key}`);\n    return Reflect.get(target, key, receiver);\n  },\n  set: function(target, key, value, receiver) {\n    console.log(`setting ${key}`);\n    return Reflect.set(target, key, value, receiver);\n  }\n});\n\n// 赋值或定义值都会输出\n// getting value\n// setting value\nobject['value'] = 3;\n```\n上面代码对一个空对象架设了一层拦截，重定义了属性的读取（get）和设置（set）行为。 \n▼ **基本用法**\n```js\nvar proxy = new Proxy(target, handler);\n```\n`target`参数表示所要拦截的目标对象，`handler`参数也是一个对象，用来定制拦截行为。\n* `get(target, propKey, receiver)`: 拦截对象属性的读取，如`proxy.foo`和`proxy['foo']`\n* `set(target, proKey, value, receiver)`: 拦截对象属性的设置，如`proxy.foo = v`和`proxy['foo'] = v`\n* ......\n\n## 统一码\nes6 字符串支持新的 Unicode 文本形式，同时也增加了新的正则表达式修饰符`u`来处理统一码。尽管如此，在实际的开发中，这样处理仍会降低程序可读性和处理速度，所以目前不建议使用。\n\n## 进制数支持\nes6 增加了对二进制（b）和八进制（o）数字面量的支持。\n```js\n0b111110111 === 503 // true\n0o767 === 503 // true\n```\n\n## Reflect\nReflect 可以理解为原有对象上的一个引用代理，它用于对原有对象进行赋值或取值操作，但不会触发对象属性的 getter 或 setter 调用，而直接使用 = 对对象进行赋值或取值操作会自动触发 getter 或 setter 方法。\n\n## tail calls 尾调用\ntail calls 尾调用保证了函数尾部调用时调用栈有一定的长度限制，这使得递归函数即使在没有限制输入时也能保证安全性而避免发生错误。\n```js\nfunction factorial(n, start = 1) {\n  if(n < = 1) {\n    return start;    \n  }\n  return factorial(n - 1, n * start);\n}\n// 默认情况下会发生栈溢出，但是在 es6 中是可以安全执行的\nfactorial(100000);\n```\n▼ **基本概念**\n尾调用是指某个函数的最后一步是调用另一个函数。递归非常耗费内存，因为需要同时保存成千上百个调用记录，很容易发生\"栈溢出\"错误（stack overflow）。但对于尾递归来说，由于只存在一个调用记录，所以永远不会发生\"栈溢出\"错误。\n▼ **注意点**\n尾递归的实现，往往需要改写递归函数，确保最后一步只调用自身。做到这一点的方法，就是把所有用到的内部变量改写成函数的参数。\n\n学习参考：\n[ECMAScript 6入门——阮一峰](http://es6.ruanyifeng.com/)\n[尾调用优化](http://www.ruanyifeng.com/blog/2015/04/tail-call.html)\n《现代前端技术解析》",[[1558699958411,["70431@DESKTOP-QB0HG1K",[[1,232,"\n"]],[230,230],[231,231]]],[1558699958636,["70431@DESKTOP-QB0HG1K",[[1,233,"\n"]],[231,231],[232,232]]],[1558699958908,["70431@DESKTOP-QB0HG1K",[[1,232,"## Promise\nPromise 是异步编程的一种解决方案，用来避免异步操作函数里的多层嵌套回调（callback）问题。Promise 代表一个异步操作的执行返回状态，这个执行回状态在 Promise 对象创建时是未知的，它允许为异步操作的成功或失败指定处理方法。\n\n<!-- more -->"]],[232,232],[382,382]]],[1558699960280,["70431@DESKTOP-QB0HG1K",[[-1,369,"<!-- more -->"]],[369,382],[369,369]]],[1558699960595,["70431@DESKTOP-QB0HG1K",[[-1,370,"\n"]],[369,369],[368,368]]],[1558699961450,["70431@DESKTOP-QB0HG1K",[[-1,369,"\n"]],[369,369],[368,368]]],[1558699961720,["70431@DESKTOP-QB0HG1K",[[-1,368,"\n"]],[368,368],[367,367]]],[1558699962822,["70431@DESKTOP-QB0HG1K",[[1,368,"\n"]],[367,367],[368,368]]]],null,"70431@DESKTOP-QB0HG1K"],["52a3c068-5612-4a82-badc-a79d8af00387",1558700212852,"---\ntitle: ES6 核心向新特性（03）\ndate: 2018-03-09 18:11:10\ntags: [JavaScript, ES6]\n---\n## Promise\nPromise 是异步编程的一种解决方案，用来避免异步操作函数里的多层嵌套回调（callback）问题。Promise 代表一个异步操作的执行返回状态，这个执行回状态在 Promise 对象创建时是未知的，它允许为异步操作的成功或失败指定处理方法。\n\n<!-- more -->\n\n## Promise\nPromise 是异步编程的一种解决方案，用来避免异步操作函数里的多层嵌套回调（callback）问题。Promise 代表一个异步操作的执行返回状态，这个执行回状态在 Promise 对象创建时是未知的，它允许为异步操作的成功或失败指定处理方法。\n\n### 基本用法\n通常 Promise 的状态有三种：Fulfilled 状态表示执行成功；Rejected 状态表示执行失败；Pending 状态表示正在执行中。\n```js\nlet status = 1;\nlet promise = new Promise(function(resolve, reject) {\n  if(status === 1) {\n    resolve('Fulfilled');\n  } else {\n    reject('Rejected');\n  }\n});\nPromise.then(function(msg) {\n  console.log('success1:' + msg);\n  return msg;\n}, function(msg) {\n  console.log('fail1:' + msg);\n  return msg;\n}).then(function(msg) {\n  console.log('success2:' + msg);\n}, function(msg) {\n  console.log('fail2:' + msg);\n});\n// success1: Fulfilled\n// success2: Fulfilled\n```\npromise 的 then 方法接受两个处理函数，当 status 为 1 时执行 Fulfilled 成功调用，否则 Rejected 失败调用。返回的状态给第二个 then 方法处理。then 方法可以将传入参数的返回值一直传递下去，如果是异步的场景，就可以用这种方式来解决多层回调嵌套的问题了。\n### 用 promise 处理异步场景\n```js\n// 希望它依次异步输出 A B C D\nlet promise = new Promise(function(resolve) {\n  setTimeout(function() {\n    console.log('A');\n    resolve();\n  }, 3000); // 延迟3秒打印A\n});\n// 使用 then 来链式处理流程\npromise.then(function() {\n  return new Promise(function(resolve, reject) {\n    setTimeout(function() {\n      console.log('B');\n      resolve();\n    }, 2000); // 延迟2秒打印B\n  });\n}).then(function() {\n  return new Promise(function(resolve, reject) {\n    setTimeout(function() {\n      console.log('C');\n      resolve();\n    }, 1000); // 延迟1秒打印C\n  });\n}).then(function() {\n  return new Promise(function(resolve, reject) {\n    console.log('D');  // 不延迟打印D\n  });\n});\n```\n通过在不同的 then 处理方法中返回一个新的 promise 来解决。返回新的 promise 里面具有`resolve()`和`reject()`方法，只有当它的 resolve 或 reject 被调用时，promise 方法才会继续执行，进入下一个 then 方法中操作。设置在异步函数完成的最后调用`resolve()`就可以有效控制 promise 进入下一个 then 方法执行。\n## Symbol\nSymbol 是除布尔值、数值等六种数据类型外的第七种数据类型。属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。\n```js\nlet object = {};\nlet name = Symbol();\nlet family = Symbol();\n\nobject[name] = 'ouven';\nobject[family] = 'zhang';\n\nconsole.log(object);\n// {\n//   Symbol(): 'ouven',\n//   Symbol(): 'zhang',\n// }\nconsole.log(typeof name); // symbol\n```\n## Proxy\nProxy 可以用来拦截某个对象的属性访问方法，然后重载对象的`.`运算符。\n```js\nlet object = new Proxy({}, {\n  get: function(target, key, receiver) {\n    console.log(`getting ${key}`);\n    return Reflect.get(target, key, receiver);\n  },\n  set: function(target, key, value, receiver) {\n    console.log(`setting ${key}`);\n    return Reflect.set(target, key, value, receiver);\n  }\n});\n\n// 赋值或定义值都会输出\n// getting value\n// setting value\nobject['value'] = 3;\n```\n上面代码对一个空对象架设了一层拦截，重定义了属性的读取（get）和设置（set）行为。 \n▼ **基本用法**\n```js\nvar proxy = new Proxy(target, handler);\n```\n`target`参数表示所要拦截的目标对象，`handler`参数也是一个对象，用来定制拦截行为。\n* `get(target, propKey, receiver)`: 拦截对象属性的读取，如`proxy.foo`和`proxy['foo']`\n* `set(target, proKey, value, receiver)`: 拦截对象属性的设置，如`proxy.foo = v`和`proxy['foo'] = v`\n* ......\n\n## 统一码\nes6 字符串支持新的 Unicode 文本形式，同时也增加了新的正则表达式修饰符`u`来处理统一码。尽管如此，在实际的开发中，这样处理仍会降低程序可读性和处理速度，所以目前不建议使用。\n\n## 进制数支持\nes6 增加了对二进制（b）和八进制（o）数字面量的支持。\n```js\n0b111110111 === 503 // true\n0o767 === 503 // true\n```\n\n## Reflect\nReflect 可以理解为原有对象上的一个引用代理，它用于对原有对象进行赋值或取值操作，但不会触发对象属性的 getter 或 setter 调用，而直接使用 = 对对象进行赋值或取值操作会自动触发 getter 或 setter 方法。\n\n## tail calls 尾调用\ntail calls 尾调用保证了函数尾部调用时调用栈有一定的长度限制，这使得递归函数即使在没有限制输入时也能保证安全性而避免发生错误。\n```js\nfunction factorial(n, start = 1) {\n  if(n < = 1) {\n    return start;    \n  }\n  return factorial(n - 1, n * start);\n}\n// 默认情况下会发生栈溢出，但是在 es6 中是可以安全执行的\nfactorial(100000);\n```\n▼ **基本概念**\n尾调用是指某个函数的最后一步是调用另一个函数。递归非常耗费内存，因为需要同时保存成千上百个调用记录，很容易发生\"栈溢出\"错误（stack overflow）。但对于尾递归来说，由于只存在一个调用记录，所以永远不会发生\"栈溢出\"错误。\n▼ **注意点**\n尾递归的实现，往往需要改写递归函数，确保最后一步只调用自身。做到这一点的方法，就是把所有用到的内部变量改写成函数的参数。\n\n学习参考：\n[ECMAScript 6入门——阮一峰](http://es6.ruanyifeng.com/)\n[尾调用优化](http://www.ruanyifeng.com/blog/2015/04/tail-call.html)\n《现代前端技术解析》",[[1558700207198,["70431@DESKTOP-QB0HG1K",[[1,52,"categories: JS相关\n"],[-1,58,"["],[1,59,"\n  - "],[-1,69,", ES6]"]],[52,75],[90,90]]],[1558700208636,["70431@DESKTOP-QB0HG1K",[[1,91,"  \n"]],[90,90],[93,93]]],[1558700212106,["70431@DESKTOP-QB0HG1K",[[1,93,"- ES6"]],[93,93],[98,98]]]],null,"70431@DESKTOP-QB0HG1K"]]}