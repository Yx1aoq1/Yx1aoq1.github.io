{"compress":true,"commitItems":[["648f68b5-e940-443a-a953-9f7e69748d28",1558699090869,"---\ntitle: DOM基础知识巩固\ndate: 2017-10-02 13:15:36\ntags: [DOM,BOM,HTML]\n---\n## DOM本质\nDOM（Document Object Model）是浏览器将文档转换成的一个树形对象模型，使之能够识别并且进行js操作。\n\n## DOM节点操作\n\n### 获取DOM节点\n\n* `document.getElementById`\n* `document.getElementsByTagName`\n* `document.getElementsByClassName`\n* `document.querySelectorAll`\n\n### property与attribute\n\n虽然property与attribute两者皆可翻译为“属性”，但二者的本质实际上是有很大区别的。\n\n* property是DOM中的属性，是JavaScript里的对象；\n* attribute是HTML标签上的特性，它的值只能够是字符串；\n\n例如在html中有一段这样的代码：\n```html\n<input id=\"test\" value=\"1\" sth=\"whatever\">\n```\n我们在js中来获取这个DOM对象：\n```javascript\nvar test = document.getElementById('test');\nconsole.log(test);\nconsole.log(test.id); // 'test'\nconsole.log(test.value); // 1\nconsole.log(test.sth) // undefined\n```\n由于每一个DOM对象都会有它的默认的基本属性，在创建的时候只会创建这些基本属性，自定义的属性是不会直接放在DOM中的。对比一下的代码：\n```html\n<input id=\"test-2\" >\n```\n```javascript\nvar test_2 = document.getElementById('test-2');\nconsole.log(test_2.value); // null\n```\n虽然没有在标签中定义`value`，但由于它是DOM默认的基本属性，所以在DOM初始化的时候它还是会被创建。由此我们可以得出结论：\n\n* DOM有其默认的基本属性，而这些属性就是所谓的“property”，无论如何，它们都会在初始化的时候再DOM对象上创建。\n* 如果在TAG对这些属性进行赋值，那么这些值就会作为初始值赋给DOM的同名property。\n\n那么标签上的sth定义在哪里呢？\n\n![](https://github.com/Yx1aoq1/Yx1aoq1.github.io/raw/master/images/dom-1.png)\n\n也就是说，attributes是属于property的一个子集，它保存了HTML标签上定义的属性。如果再进一步探索attitudes中的每一个属性，会发现它们并不是简单的对象，它是一个Attr类型的对象，拥有NodeType、NodeName等属性。注意，打印attribute属性不会直接得到对象的值，而是获取一个包含属性名和值的字符串。\n```javascript\nconsole.log(test.attibutes.sth); // 'sth=\"whatever\"'\n```\n由此可以得出：\n\n* HTML标签中定义的属性和值会保存该DOM对象的attributes属性里面；\n* 这些attribute属性的JavaScript中的类型是Attr，而不仅仅是保存属性名和值这么简单；\n\n那么，如果我们更改property和attribute的值会出现什么效果呢？执行如下语句：\n```javascript\ntest.value = 'new value of prop';\nconsole.log(test.value); // 'new value of prop'\nconsole.log(test.arrtibutes.value); // 'value=\"1\"'\n```\n如果反过来，效果又是如何呢？\n```javascript\ntest.attributes.value = 'new value of attr';\nconsole.log(test.value); // 'new value of attr'\nconsole.log(test.attributes.value); // 'new value of attr'\n```\n此时，页面中的输入栏得到更新，property中的value也发生了变化。此外，执行下面语句也会得到一样的结果：\n```javascript\ntest.attributes.value.nodeValue = 'new value of attr';\n```\n由此，可得出结论：\n\n* property能够从attribute中得到同步；\n* attribute不会同步property上的值；\n* attribute和property之间的数据绑定是单向的，attribute->property；\n* 更改property和attribute上的任意值，都会将更新反映到HTML页面中；\n\n### DOM操作\n\n![](https://github.com/Yx1aoq1/Yx1aoq1.github.io/raw/master/images/dom-2.png)\n\n有关DOM操作，主要注意点在于性能方面的影响，优化DOM操作方法有：\n* 减少DOM访问次数\n* 多次访问同一DOM，应该用局部变量缓存该DOM\n* 尽可能使用querySelector，而不是使用获取HTML集合的API\n* 注意重排（reflow）和重绘（repaint）\n* 使用事件委托，减少绑定事件的数量\n\n### 重排（重构）&重绘\n\n重绘并不一定导致重排，比如修改某个元素的颜色，只会导致重绘；而重排之后，浏览器需要重新绘制受重排影响的部分。导致重排的原因有：\n\n* 添加或删除DOM元素\n* 元素位置、大小、内容改变\n* 浏览器窗口大小改变\n* 滚动条出现\n\n**最小化重排、重绘的建议：**\n\n* 不要再修改布局信息的时候，去查询布局信息\n* 修改一个元素的多个style时，一次性修改，而不是多次，能用css的class解决的，就尽量不用内联样式\n* :hover会降低响应速度，在处理很大的列表时，避免使用\n\n## BOM操作\nBOM（Browser Object Model）指的是浏览器对象模型，主要用途：\n* 检测浏览器的类型\n* 拆解url的各部分\n\n### navigator\n\n`navigator`对象：包含大量有关Web浏览器的信息，用于检测浏览器及操作系统。\n常用方法有：\n* `navigator.userAgent` //用户代理头的字符串表示\n\n### screen\n\n`screen`对象：用于获取某些关于用户屏幕的信息。\n常用方法有：\n* `screen.width/height` //屏幕的宽度与高度，以像素计 \n* `screen.availWidth/availHeight` //窗口可以使用的屏幕的宽度和高度，以像素计 \n* `screen.colorDepth` //用户表示颜色的位数，大多数系统采用32位 \n* `window.moveTo(0, 0); `\n* `window.resizeTo(screen.availWidth, screen.availHeight); ` //填充用户的屏幕\n\n### location\n\n`location`对象：表示载入窗口的URL。\n常用方法有：\n* `location.href` //当前载入页面的完整URL\n* `location.portocol` //URL中使用的协议，即双斜杠之前的部分，如http\n* `location.host` //服务器的名字，如www.wrox.com\n* `location.hostname` //通常等于host，有时会省略前面的www\n* `location.port` //URL声明的请求的端口，默认情况下，大多数URL没有端口信息，如8080\n* `location.pathname` //URL中主机名后的部分，如/pictures/index.htm\n* `location.search` //执行GET请求的URL中的问号后的部分，又称查询字符串，如?param=xxxx\n* `location.hash` //如果URL包含#，返回该符号之后的内容，如#anchor1\n* `location.assign(\"http:www.baidu.com\");` //同location.href，新地址都会被加到浏览器的历史栈中\n* `location.replace(\"http:www.baidu.com\");` //同assign()，但新地址不会被加到浏览器的历史栈中，不能通过back和forward访问\n* `location.reload(true | false);` //重新载入当前页面，为false时从浏览器缓存中重载，为true时从服务器端重载，默认为false\n\n### history\n\n`history`对象：浏览器窗口的历史\n常用方法有：\n* `history.go(-1);` //访问浏览器窗口的历史，负数为后退，正数为前进\n* `history.back();` //同上\n* `history.forward();` //同上\n* `history.length` //可以查看历史中的页面数\n\n",[[1558699088379,["70431@DESKTOP-QB0HG1K",[[1,297,"* \n"]],[296,296],[299,299]]],[1558699089147,["70431@DESKTOP-QB0HG1K",[[-1,297,"* "]],[299,299],[298,298]]],[1558699089981,["70431@DESKTOP-QB0HG1K",[[1,298,"<!-- more -->"]],[298,298],[311,311]]],[1558699090137,["70431@DESKTOP-QB0HG1K",[[1,312,"\n"]],[311,311],[312,312]]]],null,"70431@DESKTOP-QB0HG1K"],["3a5c5fa0-9ad7-42e4-87e1-fcf62b903b94",1558700040874,"---\ntitle: DOM基础知识巩固\ndate: 2017-10-02 13:15:36\ntags: [DOM,BOM,HTML]\n---\n## DOM本质\nDOM（Document Object Model）是浏览器将文档转换成的一个树形对象模型，使之能够识别并且进行js操作。\n\n## DOM节点操作\n\n### 获取DOM节点\n\n* `document.getElementById`\n* `document.getElementsByTagName`\n* `document.getElementsByClassName`\n* `document.querySelectorAll`\n\n<!-- more -->\n\n### property与attribute\n\n虽然property与attribute两者皆可翻译为“属性”，但二者的本质实际上是有很大区别的。\n\n* property是DOM中的属性，是JavaScript里的对象；\n* attribute是HTML标签上的特性，它的值只能够是字符串；\n\n例如在html中有一段这样的代码：\n```html\n<input id=\"test\" value=\"1\" sth=\"whatever\">\n```\n我们在js中来获取这个DOM对象：\n```javascript\nvar test = document.getElementById('test');\nconsole.log(test);\nconsole.log(test.id); // 'test'\nconsole.log(test.value); // 1\nconsole.log(test.sth) // undefined\n```\n由于每一个DOM对象都会有它的默认的基本属性，在创建的时候只会创建这些基本属性，自定义的属性是不会直接放在DOM中的。对比一下的代码：\n```html\n<input id=\"test-2\" >\n```\n```javascript\nvar test_2 = document.getElementById('test-2');\nconsole.log(test_2.value); // null\n```\n虽然没有在标签中定义`value`，但由于它是DOM默认的基本属性，所以在DOM初始化的时候它还是会被创建。由此我们可以得出结论：\n\n* DOM有其默认的基本属性，而这些属性就是所谓的“property”，无论如何，它们都会在初始化的时候再DOM对象上创建。\n* 如果在TAG对这些属性进行赋值，那么这些值就会作为初始值赋给DOM的同名property。\n\n那么标签上的sth定义在哪里呢？\n\n![](https://github.com/Yx1aoq1/Yx1aoq1.github.io/raw/master/images/dom-1.png)\n\n也就是说，attributes是属于property的一个子集，它保存了HTML标签上定义的属性。如果再进一步探索attitudes中的每一个属性，会发现它们并不是简单的对象，它是一个Attr类型的对象，拥有NodeType、NodeName等属性。注意，打印attribute属性不会直接得到对象的值，而是获取一个包含属性名和值的字符串。\n```javascript\nconsole.log(test.attibutes.sth); // 'sth=\"whatever\"'\n```\n由此可以得出：\n\n* HTML标签中定义的属性和值会保存该DOM对象的attributes属性里面；\n* 这些attribute属性的JavaScript中的类型是Attr，而不仅仅是保存属性名和值这么简单；\n\n那么，如果我们更改property和attribute的值会出现什么效果呢？执行如下语句：\n```javascript\ntest.value = 'new value of prop';\nconsole.log(test.value); // 'new value of prop'\nconsole.log(test.arrtibutes.value); // 'value=\"1\"'\n```\n如果反过来，效果又是如何呢？\n```javascript\ntest.attributes.value = 'new value of attr';\nconsole.log(test.value); // 'new value of attr'\nconsole.log(test.attributes.value); // 'new value of attr'\n```\n此时，页面中的输入栏得到更新，property中的value也发生了变化。此外，执行下面语句也会得到一样的结果：\n```javascript\ntest.attributes.value.nodeValue = 'new value of attr';\n```\n由此，可得出结论：\n\n* property能够从attribute中得到同步；\n* attribute不会同步property上的值；\n* attribute和property之间的数据绑定是单向的，attribute->property；\n* 更改property和attribute上的任意值，都会将更新反映到HTML页面中；\n\n### DOM操作\n\n![](https://github.com/Yx1aoq1/Yx1aoq1.github.io/raw/master/images/dom-2.png)\n\n有关DOM操作，主要注意点在于性能方面的影响，优化DOM操作方法有：\n* 减少DOM访问次数\n* 多次访问同一DOM，应该用局部变量缓存该DOM\n* 尽可能使用querySelector，而不是使用获取HTML集合的API\n* 注意重排（reflow）和重绘（repaint）\n* 使用事件委托，减少绑定事件的数量\n\n### 重排（重构）&重绘\n\n重绘并不一定导致重排，比如修改某个元素的颜色，只会导致重绘；而重排之后，浏览器需要重新绘制受重排影响的部分。导致重排的原因有：\n\n* 添加或删除DOM元素\n* 元素位置、大小、内容改变\n* 浏览器窗口大小改变\n* 滚动条出现\n\n**最小化重排、重绘的建议：**\n\n* 不要再修改布局信息的时候，去查询布局信息\n* 修改一个元素的多个style时，一次性修改，而不是多次，能用css的class解决的，就尽量不用内联样式\n* :hover会降低响应速度，在处理很大的列表时，避免使用\n\n## BOM操作\nBOM（Browser Object Model）指的是浏览器对象模型，主要用途：\n* 检测浏览器的类型\n* 拆解url的各部分\n\n### navigator\n\n`navigator`对象：包含大量有关Web浏览器的信息，用于检测浏览器及操作系统。\n常用方法有：\n* `navigator.userAgent` //用户代理头的字符串表示\n\n### screen\n\n`screen`对象：用于获取某些关于用户屏幕的信息。\n常用方法有：\n* `screen.width/height` //屏幕的宽度与高度，以像素计 \n* `screen.availWidth/availHeight` //窗口可以使用的屏幕的宽度和高度，以像素计 \n* `screen.colorDepth` //用户表示颜色的位数，大多数系统采用32位 \n* `window.moveTo(0, 0); `\n* `window.resizeTo(screen.availWidth, screen.availHeight); ` //填充用户的屏幕\n\n### location\n\n`location`对象：表示载入窗口的URL。\n常用方法有：\n* `location.href` //当前载入页面的完整URL\n* `location.portocol` //URL中使用的协议，即双斜杠之前的部分，如http\n* `location.host` //服务器的名字，如www.wrox.com\n* `location.hostname` //通常等于host，有时会省略前面的www\n* `location.port` //URL声明的请求的端口，默认情况下，大多数URL没有端口信息，如8080\n* `location.pathname` //URL中主机名后的部分，如/pictures/index.htm\n* `location.search` //执行GET请求的URL中的问号后的部分，又称查询字符串，如?param=xxxx\n* `location.hash` //如果URL包含#，返回该符号之后的内容，如#anchor1\n* `location.assign(\"http:www.baidu.com\");` //同location.href，新地址都会被加到浏览器的历史栈中\n* `location.replace(\"http:www.baidu.com\");` //同assign()，但新地址不会被加到浏览器的历史栈中，不能通过back和forward访问\n* `location.reload(true | false);` //重新载入当前页面，为false时从浏览器缓存中重载，为true时从服务器端重载，默认为false\n\n### history\n\n`history`对象：浏览器窗口的历史\n常用方法有：\n* `history.go(-1);` //访问浏览器窗口的历史，负数为后退，正数为前进\n* `history.back();` //同上\n* `history.forward();` //同上\n* `history.length` //可以查看历史中的页面数\n\n",[[1558700035970,["70431@DESKTOP-QB0HG1K",[[1,313,"\n"]],[311,311],[312,312]]],[1558700036601,["70431@DESKTOP-QB0HG1K",[[1,314,"\n"]],[312,312],[313,313]]],[1558700036960,["70431@DESKTOP-QB0HG1K",[[1,313,"## DOM本质\nDOM（Document Object Model）是浏览器将文档转换成的一个树形对象模型，使之能够识别并且进行js操作。\n\n## DOM节点操作\n\n### 获取DOM节点\n\n* `document.getElementById`\n* `document.getElementsByTagName`\n* `document.getElementsByClassName`\n* `document.querySelectorAll`\n\n<!-- more -->"]],[313,313],[552,552]]],[1558700038986,["70431@DESKTOP-QB0HG1K",[[-1,539,"<!-- more -->"]],[539,552],[539,539]]],[1558700039300,["70431@DESKTOP-QB0HG1K",[[-1,540,"\n"]],[539,539],[538,538]]],[1558700039772,["70431@DESKTOP-QB0HG1K",[[-1,539,"\n"]],[538,538],[537,537]]]],null,"70431@DESKTOP-QB0HG1K"],["cf90b89c-4e65-4588-8796-679967ef072c",1558700252780,"---\ntitle: DOM基础知识巩固\ndate: 2017-10-02 13:15:36\ntags: [DOM,BOM,HTML]\n---\n## DOM本质\nDOM（Document Object Model）是浏览器将文档转换成的一个树形对象模型，使之能够识别并且进行js操作。\n\n## DOM节点操作\n\n### 获取DOM节点\n\n* `document.getElementById`\n* `document.getElementsByTagName`\n* `document.getElementsByClassName`\n* `document.querySelectorAll`\n\n<!-- more -->\n\n## DOM本质\nDOM（Document Object Model）是浏览器将文档转换成的一个树形对象模型，使之能够识别并且进行js操作。\n\n## DOM节点操作\n\n### 获取DOM节点\n\n* `document.getElementById`\n* `document.getElementsByTagName`\n* `document.getElementsByClassName`\n* `document.querySelectorAll`\n\n### property与attribute\n\n虽然property与attribute两者皆可翻译为“属性”，但二者的本质实际上是有很大区别的。\n\n* property是DOM中的属性，是JavaScript里的对象；\n* attribute是HTML标签上的特性，它的值只能够是字符串；\n\n例如在html中有一段这样的代码：\n```html\n<input id=\"test\" value=\"1\" sth=\"whatever\">\n```\n我们在js中来获取这个DOM对象：\n```javascript\nvar test = document.getElementById('test');\nconsole.log(test);\nconsole.log(test.id); // 'test'\nconsole.log(test.value); // 1\nconsole.log(test.sth) // undefined\n```\n由于每一个DOM对象都会有它的默认的基本属性，在创建的时候只会创建这些基本属性，自定义的属性是不会直接放在DOM中的。对比一下的代码：\n```html\n<input id=\"test-2\" >\n```\n```javascript\nvar test_2 = document.getElementById('test-2');\nconsole.log(test_2.value); // null\n```\n虽然没有在标签中定义`value`，但由于它是DOM默认的基本属性，所以在DOM初始化的时候它还是会被创建。由此我们可以得出结论：\n\n* DOM有其默认的基本属性，而这些属性就是所谓的“property”，无论如何，它们都会在初始化的时候再DOM对象上创建。\n* 如果在TAG对这些属性进行赋值，那么这些值就会作为初始值赋给DOM的同名property。\n\n那么标签上的sth定义在哪里呢？\n\n![](https://github.com/Yx1aoq1/Yx1aoq1.github.io/raw/master/images/dom-1.png)\n\n也就是说，attributes是属于property的一个子集，它保存了HTML标签上定义的属性。如果再进一步探索attitudes中的每一个属性，会发现它们并不是简单的对象，它是一个Attr类型的对象，拥有NodeType、NodeName等属性。注意，打印attribute属性不会直接得到对象的值，而是获取一个包含属性名和值的字符串。\n```javascript\nconsole.log(test.attibutes.sth); // 'sth=\"whatever\"'\n```\n由此可以得出：\n\n* HTML标签中定义的属性和值会保存该DOM对象的attributes属性里面；\n* 这些attribute属性的JavaScript中的类型是Attr，而不仅仅是保存属性名和值这么简单；\n\n那么，如果我们更改property和attribute的值会出现什么效果呢？执行如下语句：\n```javascript\ntest.value = 'new value of prop';\nconsole.log(test.value); // 'new value of prop'\nconsole.log(test.arrtibutes.value); // 'value=\"1\"'\n```\n如果反过来，效果又是如何呢？\n```javascript\ntest.attributes.value = 'new value of attr';\nconsole.log(test.value); // 'new value of attr'\nconsole.log(test.attributes.value); // 'new value of attr'\n```\n此时，页面中的输入栏得到更新，property中的value也发生了变化。此外，执行下面语句也会得到一样的结果：\n```javascript\ntest.attributes.value.nodeValue = 'new value of attr';\n```\n由此，可得出结论：\n\n* property能够从attribute中得到同步；\n* attribute不会同步property上的值；\n* attribute和property之间的数据绑定是单向的，attribute->property；\n* 更改property和attribute上的任意值，都会将更新反映到HTML页面中；\n\n### DOM操作\n\n![](https://github.com/Yx1aoq1/Yx1aoq1.github.io/raw/master/images/dom-2.png)\n\n有关DOM操作，主要注意点在于性能方面的影响，优化DOM操作方法有：\n* 减少DOM访问次数\n* 多次访问同一DOM，应该用局部变量缓存该DOM\n* 尽可能使用querySelector，而不是使用获取HTML集合的API\n* 注意重排（reflow）和重绘（repaint）\n* 使用事件委托，减少绑定事件的数量\n\n### 重排（重构）&重绘\n\n重绘并不一定导致重排，比如修改某个元素的颜色，只会导致重绘；而重排之后，浏览器需要重新绘制受重排影响的部分。导致重排的原因有：\n\n* 添加或删除DOM元素\n* 元素位置、大小、内容改变\n* 浏览器窗口大小改变\n* 滚动条出现\n\n**最小化重排、重绘的建议：**\n\n* 不要再修改布局信息的时候，去查询布局信息\n* 修改一个元素的多个style时，一次性修改，而不是多次，能用css的class解决的，就尽量不用内联样式\n* :hover会降低响应速度，在处理很大的列表时，避免使用\n\n## BOM操作\nBOM（Browser Object Model）指的是浏览器对象模型，主要用途：\n* 检测浏览器的类型\n* 拆解url的各部分\n\n### navigator\n\n`navigator`对象：包含大量有关Web浏览器的信息，用于检测浏览器及操作系统。\n常用方法有：\n* `navigator.userAgent` //用户代理头的字符串表示\n\n### screen\n\n`screen`对象：用于获取某些关于用户屏幕的信息。\n常用方法有：\n* `screen.width/height` //屏幕的宽度与高度，以像素计 \n* `screen.availWidth/availHeight` //窗口可以使用的屏幕的宽度和高度，以像素计 \n* `screen.colorDepth` //用户表示颜色的位数，大多数系统采用32位 \n* `window.moveTo(0, 0); `\n* `window.resizeTo(screen.availWidth, screen.availHeight); ` //填充用户的屏幕\n\n### location\n\n`location`对象：表示载入窗口的URL。\n常用方法有：\n* `location.href` //当前载入页面的完整URL\n* `location.portocol` //URL中使用的协议，即双斜杠之前的部分，如http\n* `location.host` //服务器的名字，如www.wrox.com\n* `location.hostname` //通常等于host，有时会省略前面的www\n* `location.port` //URL声明的请求的端口，默认情况下，大多数URL没有端口信息，如8080\n* `location.pathname` //URL中主机名后的部分，如/pictures/index.htm\n* `location.search` //执行GET请求的URL中的问号后的部分，又称查询字符串，如?param=xxxx\n* `location.hash` //如果URL包含#，返回该符号之后的内容，如#anchor1\n* `location.assign(\"http:www.baidu.com\");` //同location.href，新地址都会被加到浏览器的历史栈中\n* `location.replace(\"http:www.baidu.com\");` //同assign()，但新地址不会被加到浏览器的历史栈中，不能通过back和forward访问\n* `location.reload(true | false);` //重新载入当前页面，为false时从浏览器缓存中重载，为true时从服务器端重载，默认为false\n\n### history\n\n`history`对象：浏览器窗口的历史\n常用方法有：\n* `history.go(-1);` //访问浏览器窗口的历史，负数为后退，正数为前进\n* `history.back();` //同上\n* `history.forward();` //同上\n* `history.length` //可以查看历史中的页面数\n\n",[[1558700226834,["70431@DESKTOP-QB0HG1K",[[-1,53,"["]],[54,54],[53,53]]],[1558700228706,["70431@DESKTOP-QB0HG1K",[[1,53,"\n"]],[53,53],[54,54]]],[1558700229721,["70431@DESKTOP-QB0HG1K",[[1,54,"  - "]],[54,54],[58,58]]],[1558700231250,["70431@DESKTOP-QB0HG1K",[[-1,61,","]],[62,62],[61,61]]],[1558700232691,["70431@DESKTOP-QB0HG1K",[[1,61,"\n  - "]],[61,61],[66,66]]],[1558700235007,["70431@DESKTOP-QB0HG1K",[[-1,69,","]],[70,70],[69,69]]],[1558700236146,["70431@DESKTOP-QB0HG1K",[[1,69,"\n  - "]],[69,69],[74,74]]],[1558700238000,["70431@DESKTOP-QB0HG1K",[[1,79,"="]],[79,79],[80,80]]],[1558700238473,["70431@DESKTOP-QB0HG1K",[[-1,78,"]="]],[80,80],[78,78]]],[1558700240648,["70431@DESKTOP-QB0HG1K",[[1,47,"\n"]],[46,46],[47,47]]],[1558700240834,["70431@DESKTOP-QB0HG1K",[[1,47,"categories: JS相关\ntags: \n  - JavaScript\n  - ES6"]],[47,47],[93,93]]],[1558700242474,["70431@DESKTOP-QB0HG1K",[[-1,64,"tags: \n  - JavaScript\n  - ES6"]],[64,93],[64,64]]],[1558700242836,["70431@DESKTOP-QB0HG1K",[[-1,64,"\n"]],[64,64],[63,63]]],[1558700245289,["70431@DESKTOP-QB0HG1K",[[-1,59,"JS相关"],[1,63,"Z"]],[59,63],[60,60]]],[1558700245649,["70431@DESKTOP-QB0HG1K",[[1,60,"HI"]],[60,60],[62,62]]],[1558700246299,["70431@DESKTOP-QB0HG1K",[[-1,59,"ZHI"]],[62,62],[59,59]]],[1558700247062,["70431@DESKTOP-QB0HG1K",[[1,59,"ZHIS"]],[59,59],[63,63]]],[1558700247852,["70431@DESKTOP-QB0HG1K",[[-1,59,"ZHIS"]],[63,63],[59,59]]],[1558700249204,["70431@DESKTOP-QB0HG1K",[[1,59,"zhis"]],[59,59],[63,63]]],[1558700249899,["70431@DESKTOP-QB0HG1K",[[-1,59,"zhis"]],[63,63],[59,59]]],[1558700252414,["70431@DESKTOP-QB0HG1K",[[1,59,"知识碎片"]],[59,59],[63,63]]]],null,"70431@DESKTOP-QB0HG1K"]]}