{"compress":true,"commitItems":[["18303892-3596-44dd-9e12-640d40da853e",1558699074444,"---\ntitle: ES6 核心向新特性（01）\ndate: 2018-03-07 14:19:15\ntags: [JavaScript, ES6]\n---\n## 块级作用域变量声明关键字 let 、 const\n\n### let 、 const 与 var 的对比\n* 不存在变量提升；\n```js\n// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n```\n* 暂时性死区（在代码块内，使用let命令声明变量之前，该变量都是不可用的）；\n```js\ntypeof x; // ReferenceError\nlet x;\n```\n\n* let 和 const 都只能作为块级作用域变量的声明，且只能在块级作用域内生效，块内声明的变量无法在块级外层引用；\n```js\n{\n  let a = 10;\n  var b = 1;\n}\na // ReferenceError: a is not defined.\nb // 1\n```\n* 使用 const 声明的变量必须进行初始化赋值，而且一旦赋值就不能再进行第二次修改；\n```js\nconst b = 'hello';\nb = 'world'; // Uncaught TyperError: Assignment to constant variable.\n```\n* 使用 let 、 const 在全局作用域下声明的变量不会作为属性添加到全局作用域对象里面；\n```js\nlet a = 1;\nvar A = 2;\n\nconsole.log(window.a || global.a); // undefined\nconsole.log(window.A || global.A); // 2\n```\n* 用 let 、 const 赋值语句的执行速度比使用 var 快约65%；\n\n### 使用场景的区分\n模块内不变的引用和常量，使用`const`定义；可变的变量或引用使用`let`声明；`var`仅用于声明函数整个作用域内需要使用的变量。\n\n## 字符串模板\n```js\nlet name = \"Bob\", time = \"today\";\n`Hello ${name}, how are you ${time}?`\n```\n* 字符串模板可以在有字符串内容和变量混合连接的场景中，使得代码书写更高效与整洁\n* 字符串模板不会压缩内部的换行和空格，而是按照原有的格式输出\n\n## 解构赋值\n解决了赋值的编码荣宇和模块按需导出的问题。主要分为数组解构和对象解构。\n### 数组解构\n▼ **变量的赋值**\n```js\nlet [a, b, c] = [11, 22];\na // 11\nb // 22\nc // undefined\n\nlet [head, ...tail] = [1, 2, 3, 4];\nhead // 1\ntail // [2, 3, 4]\n\nlet [a, [b], d] = [1, [2, 3], 4];\na // 1\nb // 2\nd // 4\n```\n▼ **指定默认值**\n```js\nlet [foo = true] = [];\nfoo // true\n```\n### 对象解构\n▼ **变量的赋值**（对象的属性没有次序，变量必须与属性同名，才能取到正确的值）\n```js\nlet { foo, bar } = { foo: \"aaa\", bar: \"bbb\" };\nfoo // \"aaa\"\nbar // \"bbb\"\n```\n▼ **指定默认值**\n```js\nvar {x = 3} = {};\nx // 3\n```\n\n## 数组的新特性\n### 扩展运算符(`...`)\n```js\nconst arr =['hello', 'world'];\nconst newArr = [...arr]; // ['hello', 'world']\n```\n**注意点**： `...`进行的数组复制是浅拷贝\n### 扩展API\n* `Array.from`: 用于将数组对象转化为真正的数组\n```js\nlet arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    length: 3\n};\n// ES5的写法\nvar arr1 = [].slice.call(arrayLike); // ['a', 'b', 'c']\n\n// ES6的写法\nlet arr2 = Array.from(arrayLike); // ['a', 'b', 'c']\n```\n* `Array.of`: 将传入的一组参数转换为数组\n```js\nArray.of(3, 11, 8) // [3,11,8]\n```\n* `Array.prototype.copyWithin`: 可以在当前数组内部将指定位置的数组项复制到其他位置，然后返回当前数组，使用`copyWithin`方法会修改当前数组\n```js\nlet colors = ['red', 'blue', 'green', 'green'];\ncolors.copyWithin(0, 3); // ['green', 'blue', 'green', 'green']\n```\n* `Array.prototype.fill`: 使用给定值，填充一个数组，会改变原来的数组\n```js\ncolors.fill('black'); // ['black', black', black', black']\n```\n* `Arrau.prototype.find`: 用于找出第一个符合条件的数组元素\n```js\ncolors.find(function(color) {\n  if(color === 'green') {\n    return color;\n  }\n}) // green\n```\n* `Array.prototype.findIndex`: 用来返回某个特定数组元素在数组中的位置\n```js\ncolors.findIndex(function(color) {\n  if(color === 'green') {\n    return color;\n  }\n}) // 2\n```\n### 新的数组迭代方式\n`entries()`、`keys()`和`values()`，均可以用来遍历数组。它们都返回一个迭代器对象，也可以用`for...of`循环进行遍历，区别是`keys()`是对数组键名进行遍历，`values()`是对数组键值进行遍历，`entries()`是对数组中键值对进行遍历。\n```js\nfor (let index of ['a', 'b'].keys()) {\n  console.log(index);\n}\n// 0\n// 1\n\nfor (let elem of ['a', 'b'].values()) {\n  console.log(elem);\n}\n// 'a'\n// 'b'\n\nfor (let [index, elem] of ['a', 'b'].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n```\n\n## 增强函数\n### 函数参数\nES6 对函数参数的改进主要是添加了默认参数、不定参数和拓展参数\n\n▼ **默认参数** \n```js\nfunction sayHi(name = 'ouven') {\n  console.log(`Hello ${name}`);\n}\nsayHi(); // Hello ouven\n```\n▼ **不定参数**\n```js\nfunction sayHi(...name) {\n  console.log(name.reduce((a,b) => `Hello ${a} ${b}`));\n}\nsayHi('oven', 'zhang'); // Hello ouven zhang\n```\n▼ **扩展参数**\n```js\nlet name = ['oven', 'zhang'];\nfunction sayHello(name1, name2) {\n  console.log(`Hello ${name1} ${name2}`);\n}\nsayHello(...name); // Hello ouven zhang\n```\n其中不定参数和扩展参数可以认为恰好是相反的两个模式，不定参数是使用数组来表示多个参数，扩展参数将多个参数映射到一个数组。\n▼ **不定参数与 arguments 的对比**\n不定参数和`arguments`都可以使用函数的形参来表示所有的参数组成的列表，但是`arguments`不是真正的数组，所有使用数组的方法必须使用`Array.prototype.slice.call`先将其转换成数组，所有使用起来不定参数更加的方便。\n\n### 箭头函数\n```js\nvar sum = (num1, num2) => num1 + num2;\n// 等同于\nvar sum = function(num1, num2) {\n  return num1 + num2;\n};\n```\n**注意点**：箭头函数没有完整的执行上下文，因为其 this 和外层的 this 相同，可以理解为它的执行上下文只有变量对象和作用域链， 没有 this 值。\n\n## 增强对象\nes6 中，对象的使用更加方便。在定义对象时通过属性简写、变量作为属性名或省略对象函数属性的书写等方式可以提高编码的效率。\n```js\nconst name = 'onven';\n\nfunction getKey(key) {\n  return key;\n}\n\nconst people = {\n  // 属性简写\n  name,\n  // 返回变量或对象作为属性名\n  [getKey('family')]: 'zhang',\n  // 对象方法属性简写声明\n  sayHi() {\n    console.log(`Hello ${this.name} ${this.family}`);\n  }\n}\n\npeople.sayHi(); // Hello ouven zhang\n```\n**注意点**：为了代码便于维护和理解，建议尽量不将变量或对象作为对象的属性名。\n\n学习参考：\n[ECMAScript 6入门——阮一峰](http://es6.ruanyifeng.com/)\n《现代前端技术解析》",[[1558699070401,["70431@DESKTOP-QB0HG1K",[[1,362,"\n"]],[361,361],[362,362]]],[1558699070442,["70431@DESKTOP-QB0HG1K",[[1,363,"\n"]],[362,362],[363,363]]],[1558699071756,["70431@DESKTOP-QB0HG1K",[[1,362,"<!-- more -->"]],[362,362],[375,375]]],[1558699075761,["70431@DESKTOP-QB0HG1K",[[-1,362,"<!-- more -->"]],[375,375],[362,362]]],[1558699076012,["70431@DESKTOP-QB0HG1K",[[-1,363,"\n"]],[363,363],[362,362]]],[1558699076487,["70431@DESKTOP-QB0HG1K",[[-1,362,"\n"]],[362,362],[361,361]]],[1558699078416,["70431@DESKTOP-QB0HG1K",[[-1,361,"\n"]],[361,361],[360,360]]],[1558699079878,["70431@DESKTOP-QB0HG1K",[[1,276,"\n"]],[275,275],[276,276]]],[1558699080620,["70431@DESKTOP-QB0HG1K",[[1,277,"\n"]],[276,276],[277,277]]],[1558699082465,["70431@DESKTOP-QB0HG1K",[[1,278,"\n"]],[276,276],[277,277]]],[1558699082736,["70431@DESKTOP-QB0HG1K",[[1,277,"<!-- more -->"]],[277,277],[290,290]]]],null,"70431@DESKTOP-QB0HG1K"],["0661f96a-2afa-4df3-b3e4-9136acc8a1f9",1558700029249,"---\ntitle: ES6 核心向新特性（01）\ndate: 2018-03-07 14:19:15\ntags: [JavaScript, ES6]\n---\n## 块级作用域变量声明关键字 let 、 const\n\n### let 、 const 与 var 的对比\n* 不存在变量提升；\n```js\n// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n```\n\n<!-- more -->\n\n* 暂时性死区（在代码块内，使用let命令声明变量之前，该变量都是不可用的）；\n```js\ntypeof x; // ReferenceError\nlet x;\n```\n* let 和 const 都只能作为块级作用域变量的声明，且只能在块级作用域内生效，块内声明的变量无法在块级外层引用；\n```js\n{\n  let a = 10;\n  var b = 1;\n}\na // ReferenceError: a is not defined.\nb // 1\n```\n* 使用 const 声明的变量必须进行初始化赋值，而且一旦赋值就不能再进行第二次修改；\n```js\nconst b = 'hello';\nb = 'world'; // Uncaught TyperError: Assignment to constant variable.\n```\n* 使用 let 、 const 在全局作用域下声明的变量不会作为属性添加到全局作用域对象里面；\n```js\nlet a = 1;\nvar A = 2;\n\nconsole.log(window.a || global.a); // undefined\nconsole.log(window.A || global.A); // 2\n```\n* 用 let 、 const 赋值语句的执行速度比使用 var 快约65%；\n\n### 使用场景的区分\n模块内不变的引用和常量，使用`const`定义；可变的变量或引用使用`let`声明；`var`仅用于声明函数整个作用域内需要使用的变量。\n\n## 字符串模板\n```js\nlet name = \"Bob\", time = \"today\";\n`Hello ${name}, how are you ${time}?`\n```\n* 字符串模板可以在有字符串内容和变量混合连接的场景中，使得代码书写更高效与整洁\n* 字符串模板不会压缩内部的换行和空格，而是按照原有的格式输出\n\n## 解构赋值\n解决了赋值的编码荣宇和模块按需导出的问题。主要分为数组解构和对象解构。\n### 数组解构\n▼ **变量的赋值**\n```js\nlet [a, b, c] = [11, 22];\na // 11\nb // 22\nc // undefined\n\nlet [head, ...tail] = [1, 2, 3, 4];\nhead // 1\ntail // [2, 3, 4]\n\nlet [a, [b], d] = [1, [2, 3], 4];\na // 1\nb // 2\nd // 4\n```\n▼ **指定默认值**\n```js\nlet [foo = true] = [];\nfoo // true\n```\n### 对象解构\n▼ **变量的赋值**（对象的属性没有次序，变量必须与属性同名，才能取到正确的值）\n```js\nlet { foo, bar } = { foo: \"aaa\", bar: \"bbb\" };\nfoo // \"aaa\"\nbar // \"bbb\"\n```\n▼ **指定默认值**\n```js\nvar {x = 3} = {};\nx // 3\n```\n\n## 数组的新特性\n### 扩展运算符(`...`)\n```js\nconst arr =['hello', 'world'];\nconst newArr = [...arr]; // ['hello', 'world']\n```\n**注意点**： `...`进行的数组复制是浅拷贝\n### 扩展API\n* `Array.from`: 用于将数组对象转化为真正的数组\n```js\nlet arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    length: 3\n};\n// ES5的写法\nvar arr1 = [].slice.call(arrayLike); // ['a', 'b', 'c']\n\n// ES6的写法\nlet arr2 = Array.from(arrayLike); // ['a', 'b', 'c']\n```\n* `Array.of`: 将传入的一组参数转换为数组\n```js\nArray.of(3, 11, 8) // [3,11,8]\n```\n* `Array.prototype.copyWithin`: 可以在当前数组内部将指定位置的数组项复制到其他位置，然后返回当前数组，使用`copyWithin`方法会修改当前数组\n```js\nlet colors = ['red', 'blue', 'green', 'green'];\ncolors.copyWithin(0, 3); // ['green', 'blue', 'green', 'green']\n```\n* `Array.prototype.fill`: 使用给定值，填充一个数组，会改变原来的数组\n```js\ncolors.fill('black'); // ['black', black', black', black']\n```\n* `Arrau.prototype.find`: 用于找出第一个符合条件的数组元素\n```js\ncolors.find(function(color) {\n  if(color === 'green') {\n    return color;\n  }\n}) // green\n```\n* `Array.prototype.findIndex`: 用来返回某个特定数组元素在数组中的位置\n```js\ncolors.findIndex(function(color) {\n  if(color === 'green') {\n    return color;\n  }\n}) // 2\n```\n### 新的数组迭代方式\n`entries()`、`keys()`和`values()`，均可以用来遍历数组。它们都返回一个迭代器对象，也可以用`for...of`循环进行遍历，区别是`keys()`是对数组键名进行遍历，`values()`是对数组键值进行遍历，`entries()`是对数组中键值对进行遍历。\n```js\nfor (let index of ['a', 'b'].keys()) {\n  console.log(index);\n}\n// 0\n// 1\n\nfor (let elem of ['a', 'b'].values()) {\n  console.log(elem);\n}\n// 'a'\n// 'b'\n\nfor (let [index, elem] of ['a', 'b'].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n```\n\n## 增强函数\n### 函数参数\nES6 对函数参数的改进主要是添加了默认参数、不定参数和拓展参数\n\n▼ **默认参数** \n```js\nfunction sayHi(name = 'ouven') {\n  console.log(`Hello ${name}`);\n}\nsayHi(); // Hello ouven\n```\n▼ **不定参数**\n```js\nfunction sayHi(...name) {\n  console.log(name.reduce((a,b) => `Hello ${a} ${b}`));\n}\nsayHi('oven', 'zhang'); // Hello ouven zhang\n```\n▼ **扩展参数**\n```js\nlet name = ['oven', 'zhang'];\nfunction sayHello(name1, name2) {\n  console.log(`Hello ${name1} ${name2}`);\n}\nsayHello(...name); // Hello ouven zhang\n```\n其中不定参数和扩展参数可以认为恰好是相反的两个模式，不定参数是使用数组来表示多个参数，扩展参数将多个参数映射到一个数组。\n▼ **不定参数与 arguments 的对比**\n不定参数和`arguments`都可以使用函数的形参来表示所有的参数组成的列表，但是`arguments`不是真正的数组，所有使用数组的方法必须使用`Array.prototype.slice.call`先将其转换成数组，所有使用起来不定参数更加的方便。\n\n### 箭头函数\n```js\nvar sum = (num1, num2) => num1 + num2;\n// 等同于\nvar sum = function(num1, num2) {\n  return num1 + num2;\n};\n```\n**注意点**：箭头函数没有完整的执行上下文，因为其 this 和外层的 this 相同，可以理解为它的执行上下文只有变量对象和作用域链， 没有 this 值。\n\n## 增强对象\nes6 中，对象的使用更加方便。在定义对象时通过属性简写、变量作为属性名或省略对象函数属性的书写等方式可以提高编码的效率。\n```js\nconst name = 'onven';\n\nfunction getKey(key) {\n  return key;\n}\n\nconst people = {\n  // 属性简写\n  name,\n  // 返回变量或对象作为属性名\n  [getKey('family')]: 'zhang',\n  // 对象方法属性简写声明\n  sayHi() {\n    console.log(`Hello ${this.name} ${this.family}`);\n  }\n}\n\npeople.sayHi(); // Hello ouven zhang\n```\n**注意点**：为了代码便于维护和理解，建议尽量不将变量或对象作为对象的属性名。\n\n学习参考：\n[ECMAScript 6入门——阮一峰](http://es6.ruanyifeng.com/)\n《现代前端技术解析》",[[1558700022740,["70431@DESKTOP-QB0HG1K",[[1,292,"\n"]],[290,290],[291,291]]],[1558700023178,["70431@DESKTOP-QB0HG1K",[[1,293,"\n"]],[291,291],[292,292]]],[1558700023394,["70431@DESKTOP-QB0HG1K",[[1,292,"## 块级作用域变量声明关键字 let 、 const\n\n### let 、 const 与 var 的对比\n* 不存在变量提升；\n```js\n// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n```\n\n<!-- more -->"]],[292,292],[502,502]]],[1558700025328,["70431@DESKTOP-QB0HG1K",[[-1,489,"<!-- more -->"]],[489,502],[489,489]]],[1558700025643,["70431@DESKTOP-QB0HG1K",[[-1,490,"\n"]],[489,489],[488,488]]],[1558700026138,["70431@DESKTOP-QB0HG1K",[[-1,489,"\n"]],[488,488],[487,487]]],[1558700028163,["70431@DESKTOP-QB0HG1K",[[-1,488,"\n"]],[488,488],[487,487]]]],null,"70431@DESKTOP-QB0HG1K"],["92914714-da38-4de7-a031-31067a579beb",1558700221325,"---\ntitle: ES6 核心向新特性（01）\ndate: 2018-03-07 14:19:15\ntags: [JavaScript, ES6]\n---\n## 块级作用域变量声明关键字 let 、 const\n\n### let 、 const 与 var 的对比\n* 不存在变量提升；\n```js\n// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n```\n\n<!-- more -->\n\n## 块级作用域变量声明关键字 let 、 const\n\n### let 、 const 与 var 的对比\n* 不存在变量提升；\n```js\n// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n```\n* 暂时性死区（在代码块内，使用let命令声明变量之前，该变量都是不可用的）；\n```js\ntypeof x; // ReferenceError\nlet x;\n```\n* let 和 const 都只能作为块级作用域变量的声明，且只能在块级作用域内生效，块内声明的变量无法在块级外层引用；\n```js\n{\n  let a = 10;\n  var b = 1;\n}\na // ReferenceError: a is not defined.\nb // 1\n```\n* 使用 const 声明的变量必须进行初始化赋值，而且一旦赋值就不能再进行第二次修改；\n```js\nconst b = 'hello';\nb = 'world'; // Uncaught TyperError: Assignment to constant variable.\n```\n* 使用 let 、 const 在全局作用域下声明的变量不会作为属性添加到全局作用域对象里面；\n```js\nlet a = 1;\nvar A = 2;\n\nconsole.log(window.a || global.a); // undefined\nconsole.log(window.A || global.A); // 2\n```\n* 用 let 、 const 赋值语句的执行速度比使用 var 快约65%；\n\n### 使用场景的区分\n模块内不变的引用和常量，使用`const`定义；可变的变量或引用使用`let`声明；`var`仅用于声明函数整个作用域内需要使用的变量。\n\n## 字符串模板\n```js\nlet name = \"Bob\", time = \"today\";\n`Hello ${name}, how are you ${time}?`\n```\n* 字符串模板可以在有字符串内容和变量混合连接的场景中，使得代码书写更高效与整洁\n* 字符串模板不会压缩内部的换行和空格，而是按照原有的格式输出\n\n## 解构赋值\n解决了赋值的编码荣宇和模块按需导出的问题。主要分为数组解构和对象解构。\n### 数组解构\n▼ **变量的赋值**\n```js\nlet [a, b, c] = [11, 22];\na // 11\nb // 22\nc // undefined\n\nlet [head, ...tail] = [1, 2, 3, 4];\nhead // 1\ntail // [2, 3, 4]\n\nlet [a, [b], d] = [1, [2, 3], 4];\na // 1\nb // 2\nd // 4\n```\n▼ **指定默认值**\n```js\nlet [foo = true] = [];\nfoo // true\n```\n### 对象解构\n▼ **变量的赋值**（对象的属性没有次序，变量必须与属性同名，才能取到正确的值）\n```js\nlet { foo, bar } = { foo: \"aaa\", bar: \"bbb\" };\nfoo // \"aaa\"\nbar // \"bbb\"\n```\n▼ **指定默认值**\n```js\nvar {x = 3} = {};\nx // 3\n```\n\n## 数组的新特性\n### 扩展运算符(`...`)\n```js\nconst arr =['hello', 'world'];\nconst newArr = [...arr]; // ['hello', 'world']\n```\n**注意点**： `...`进行的数组复制是浅拷贝\n### 扩展API\n* `Array.from`: 用于将数组对象转化为真正的数组\n```js\nlet arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    length: 3\n};\n// ES5的写法\nvar arr1 = [].slice.call(arrayLike); // ['a', 'b', 'c']\n\n// ES6的写法\nlet arr2 = Array.from(arrayLike); // ['a', 'b', 'c']\n```\n* `Array.of`: 将传入的一组参数转换为数组\n```js\nArray.of(3, 11, 8) // [3,11,8]\n```\n* `Array.prototype.copyWithin`: 可以在当前数组内部将指定位置的数组项复制到其他位置，然后返回当前数组，使用`copyWithin`方法会修改当前数组\n```js\nlet colors = ['red', 'blue', 'green', 'green'];\ncolors.copyWithin(0, 3); // ['green', 'blue', 'green', 'green']\n```\n* `Array.prototype.fill`: 使用给定值，填充一个数组，会改变原来的数组\n```js\ncolors.fill('black'); // ['black', black', black', black']\n```\n* `Arrau.prototype.find`: 用于找出第一个符合条件的数组元素\n```js\ncolors.find(function(color) {\n  if(color === 'green') {\n    return color;\n  }\n}) // green\n```\n* `Array.prototype.findIndex`: 用来返回某个特定数组元素在数组中的位置\n```js\ncolors.findIndex(function(color) {\n  if(color === 'green') {\n    return color;\n  }\n}) // 2\n```\n### 新的数组迭代方式\n`entries()`、`keys()`和`values()`，均可以用来遍历数组。它们都返回一个迭代器对象，也可以用`for...of`循环进行遍历，区别是`keys()`是对数组键名进行遍历，`values()`是对数组键值进行遍历，`entries()`是对数组中键值对进行遍历。\n```js\nfor (let index of ['a', 'b'].keys()) {\n  console.log(index);\n}\n// 0\n// 1\n\nfor (let elem of ['a', 'b'].values()) {\n  console.log(elem);\n}\n// 'a'\n// 'b'\n\nfor (let [index, elem] of ['a', 'b'].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n```\n\n## 增强函数\n### 函数参数\nES6 对函数参数的改进主要是添加了默认参数、不定参数和拓展参数\n\n▼ **默认参数** \n```js\nfunction sayHi(name = 'ouven') {\n  console.log(`Hello ${name}`);\n}\nsayHi(); // Hello ouven\n```\n▼ **不定参数**\n```js\nfunction sayHi(...name) {\n  console.log(name.reduce((a,b) => `Hello ${a} ${b}`));\n}\nsayHi('oven', 'zhang'); // Hello ouven zhang\n```\n▼ **扩展参数**\n```js\nlet name = ['oven', 'zhang'];\nfunction sayHello(name1, name2) {\n  console.log(`Hello ${name1} ${name2}`);\n}\nsayHello(...name); // Hello ouven zhang\n```\n其中不定参数和扩展参数可以认为恰好是相反的两个模式，不定参数是使用数组来表示多个参数，扩展参数将多个参数映射到一个数组。\n▼ **不定参数与 arguments 的对比**\n不定参数和`arguments`都可以使用函数的形参来表示所有的参数组成的列表，但是`arguments`不是真正的数组，所有使用数组的方法必须使用`Array.prototype.slice.call`先将其转换成数组，所有使用起来不定参数更加的方便。\n\n### 箭头函数\n```js\nvar sum = (num1, num2) => num1 + num2;\n// 等同于\nvar sum = function(num1, num2) {\n  return num1 + num2;\n};\n```\n**注意点**：箭头函数没有完整的执行上下文，因为其 this 和外层的 this 相同，可以理解为它的执行上下文只有变量对象和作用域链， 没有 this 值。\n\n## 增强对象\nes6 中，对象的使用更加方便。在定义对象时通过属性简写、变量作为属性名或省略对象函数属性的书写等方式可以提高编码的效率。\n```js\nconst name = 'onven';\n\nfunction getKey(key) {\n  return key;\n}\n\nconst people = {\n  // 属性简写\n  name,\n  // 返回变量或对象作为属性名\n  [getKey('family')]: 'zhang',\n  // 对象方法属性简写声明\n  sayHi() {\n    console.log(`Hello ${this.name} ${this.family}`);\n  }\n}\n\npeople.sayHi(); // Hello ouven zhang\n```\n**注意点**：为了代码便于维护和理解，建议尽量不将变量或对象作为对象的属性名。\n\n学习参考：\n[ECMAScript 6入门——阮一峰](http://es6.ruanyifeng.com/)\n《现代前端技术解析》",[[1558700220765,["70431@DESKTOP-QB0HG1K",[[1,52,"categories: JS相关\n"],[-1,58,"["],[1,59,"\n  - "],[-1,69,","],[1,70,"\n  -"],[-1,74,"]"]],[52,75],[98,98]]]],null,"70431@DESKTOP-QB0HG1K"]]}