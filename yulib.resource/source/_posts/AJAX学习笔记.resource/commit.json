{"compress":true,"commitItems":[["57fd704b-66f0-4b73-8673-b885119da42a",1558700050688,"---\ntitle: AJAX学习笔记\ndate: 2017-03-21 16:21:19\ntags: [Ajax]\n---\n> AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）\n> AJAX 不是新的编程语言，而是一种使用现有标准的新方法。\n> AJAX 是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面的情况下。\n* 同步：发送方发出数据后，等接收方发回响应以后才发下一个数据包的通讯方式\n* 异步：发送方发出数据后，不等接收方发回响应，接着发送下个数据包的通讯方式\n（简单点说：同步就是只能一件一件事的来做，而异步就是可以多件事同时进行）\n\n<!--more-->\n\n## 实现\n* 实现页面\n* 运用XMLHttpRequest和web服务器进行数据的异步交换\n* 运用javascript操作DOM，实现动态局部刷新\n\n## 创建ajax过程\n* 创建XMLHttpRequest对象\n* 创建一个新的HTTP请求，并指定该HTTP请求的方法、URL及验证信息\n* 设置响应HTTP请求状态变化的函数\n* 发送HTTP请求\n* 获取异步调用返回的数据\n* 使用Javascript和DOM实现局部刷新\n\n## XHR\n* 发送请求\n\t* `open(method,url,async)` \nmethod表示发送方法(GET,POST)，url表示请求地址（相对或绝对），async表示同步或异步（异步true，默认值，同步false）\n\t* `send(string)` \nGET请求参数可不填写或写none，用POST请求需要填写。\n```javascript\nvar request = new XMLHttpRequest(); //创建XHR对象\nrequest.open(\"GET\",\"get.php\",true);\nrequest.send();\n\n//创建信息\nrequest.open(\"POST\",\"post.php\",true);\nrequest.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");\n//头信息，提示服务器要发送一个表单\nrequest.send(\"name=tom&sex=man\");\n```\n* 响应请求\n\t* `responseText`：获得字符串形式的响应数据\n\t* `responseXML`：获得XML形式的响应数据（XML交互较少，一般采用json）\n\t* `status&statusText`：以数字和文本形式返回HTTP状态码\n\t* `getAllResponseHeader()`：获取所有的响应报头\n\t* `getResponseHeader()`：查询响应中的某个字段的值\n\n* 监听服务器响应\n**readyState属性：** 代表服务器响应的变化\n\t* 0：请求未初始化，open还没有调用\n\t* 1：服务器连接已经建立，open已经调用\n\t* 2：请求已接收，也就是接收到头信息了\n\t* 3：请求处理中，也就是接收到响应主体了\n\t* 4：请求已完成，且响应已就绪（完成）\n```javascript\nvar request = new XMLHttpRequest();\nrequest.open(\"GET\",\"get.php\",true);\nrequest.send();\nrequest.onreadystatechange = function() {\n\tif(request.readyState === 4 && request.status === 200){\n\t\t//request.responseText...\n\t}\n}\n```\n\n## 用jQuery实现AJAX\n* `jQuery.ajax([settings])`\n\t* `type`：类型，“POST”或“GET\",默认\"GET\"\n\t* `url`：发送请求的地址\n\t* `data`：是一个对象，连同请求发送到服务器的数据\n\t* `dataType`：预期服务器返回的数据类型。如果不指定，jQuery将自动根据HTTP包MIME信息来只能判断，一般采用**json格式**，可以设置为**\"json\"**\n\t* `success`：是一个方法，请求成功后的回调函数。传入返回后的数据，以及包含成功代码的字符串\n\t* `error`：是一个方法，请求失败时调用此函数。传入XHR对象\n```javascript\n$.ajax({\n\ttype:\"GET\",\n\turl:\"get.php\",\n\tdataType:\"json\",\n\tsuccess:function(data){\n\t\t//成功后的操作\n\t},\n\terror:function(jqXHR){\n\t\talert(\"error:\"+jqXHR.status);\n\t}\n})\n\n$.ajax({\n\ttype:\"POST\",\n\turl:\"get.php\",\n\tdataType:\"json\",\n\tdata:{\n\t\tname:123\n\t\tnumber:123\n\t\t//jquery可以自动将Form Data转换成name:123&number:123这种格式\n\t\t//并自动设置Content-Type:application/x-www-form-urlencoded\n\t},\n\tsuccess:function(data){\n\t\t//成功后的操作\n\t},\n\terror:function(jqXHR){\n\t\talert(\"error:\"+jqXHR.status);\n\t}\n})\n```\n\n## 跨域\n* 一个域名地址的组成：`http://www.abc.com:8080/scripts/jquery.js`\n\t* 协议：http://\n\t* 子域名：www\n\t* 主域名：abc.com\n\t* 端口号：8080（默认8080，可以省略）\n\t* 请求资源地址：scripts/jquery.js\n* 当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域\n* 不同域之间相互请求资源，算作“跨域”\n  比如：`http://www.abc.com/index.html` 请求 `http://www.efg.com/service.php`\n* JavaScript出于安全方面的考虑，不允许跨域调用其他页面的对象。简单说就是a.com域名下的js无法操作b.com或者c.a.com域名下的对象\n\n## 处理跨域的方法\n* 代理\n  通过在同域名的web服务器端创建一个代理：\n  北京服务器：`www.beijing.com`\n  上海服务器：`www.shanghai.com`\n  在北京的web服务器的后台`www.beijing.com/proxy-shanghaiservice.php`来调用`www.shanghai.com/service.php`的服务器，然后把响应结果返回给前端，这样前端调用北京同域名的服务就和调用上海的服务效果相同了\n* JSONP\n  JSONP可用于解决主流浏览器的跨域数据访问的问题（json+padding，内填充）\n\n```html\n在www.aaa.com中\n <script>\n function jsonp(json){\n \talert(json[\"name\"]);\n }\n </script>\n <script src=\"http://www.bbb.com/jsonp.js\"></script>\n\n 在www.bbb.com中\n jsonp({\"name\":\"tom\",\"age\":27});\n```\n```javascript\n//jsonp只支持get请求\n$.ajax({\n\ttype:\"GET\",\n\turl:\"http://www.bbb.com/service.php\",\n\tdataType:\"jsonp\",\n\tjsonp:\"callback\",//取值任意，与后端相连接\n\tsuccess:function(data){\n\t\t//成功后的操作\n\t},\n\terror:function(jqXHR){\n\t\talert(\"error:\"+jqXHR.status);\n\t}\n})\n```\n* XHR2\n  HTML5提供的XMLHttpRequest Level2已经实现了跨域访问以及其他的一些新功能（不支持IE10以下）\n  在服务器端做一些小改造即可：\n  `header('Access-Control-Allow-Origin:*');`\n  `header('Access-Control-Allow-Methods:POST,GET');`",[[1558700046320,["70431@DESKTOP-QB0HG1K",[[1,329,"\n"]],[327,327],[328,328]]],[1558700046546,["70431@DESKTOP-QB0HG1K",[[1,330,"\n"]],[328,328],[329,329]]],[1558700046839,["70431@DESKTOP-QB0HG1K",[[1,329,"> AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）\n> AJAX 不是新的编程语言，而是一种使用现有标准的新方法。\n> AJAX 是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面的情况下。\n* 同步：发送方发出数据后，等接收方发回响应以后才发下一个数据包的通讯方式\n* 异步：发送方发出数据后，不等接收方发回响应，接着发送下个数据包的通讯方式\n（简单点说：同步就是只能一件一件事的来做，而异步就是可以多件事同时进行）\n\n<!--more-->"]],[329,329],[593,593]]],[1558700048525,["70431@DESKTOP-QB0HG1K",[[-1,582,"<!--more-->"]],[582,593],[582,582]]],[1558700048797,["70431@DESKTOP-QB0HG1K",[[-1,583,"\n"]],[582,582],[581,581]]],[1558700049157,["70431@DESKTOP-QB0HG1K",[[-1,582,"\n"]],[581,581],[580,580]]]],null,"70431@DESKTOP-QB0HG1K"],["d12fae3a-44e8-4051-b52f-0ee07756207f",1558700264551,"---\ntitle: AJAX学习笔记\ndate: 2017-03-21 16:21:19\ntags: [Ajax]\n---\n> AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）\n> AJAX 不是新的编程语言，而是一种使用现有标准的新方法。\n> AJAX 是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面的情况下。\n* 同步：发送方发出数据后，等接收方发回响应以后才发下一个数据包的通讯方式\n* 异步：发送方发出数据后，不等接收方发回响应，接着发送下个数据包的通讯方式\n（简单点说：同步就是只能一件一件事的来做，而异步就是可以多件事同时进行）\n\n<!--more-->\n\n> AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）\n> AJAX 不是新的编程语言，而是一种使用现有标准的新方法。\n> AJAX 是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面的情况下。\n* 同步：发送方发出数据后，等接收方发回响应以后才发下一个数据包的通讯方式\n* 异步：发送方发出数据后，不等接收方发回响应，接着发送下个数据包的通讯方式\n（简单点说：同步就是只能一件一件事的来做，而异步就是可以多件事同时进行）\n\n## 实现\n* 实现页面\n* 运用XMLHttpRequest和web服务器进行数据的异步交换\n* 运用javascript操作DOM，实现动态局部刷新\n\n## 创建ajax过程\n* 创建XMLHttpRequest对象\n* 创建一个新的HTTP请求，并指定该HTTP请求的方法、URL及验证信息\n* 设置响应HTTP请求状态变化的函数\n* 发送HTTP请求\n* 获取异步调用返回的数据\n* 使用Javascript和DOM实现局部刷新\n\n## XHR\n* 发送请求\n\t* `open(method,url,async)` \nmethod表示发送方法(GET,POST)，url表示请求地址（相对或绝对），async表示同步或异步（异步true，默认值，同步false）\n\t* `send(string)` \nGET请求参数可不填写或写none，用POST请求需要填写。\n```javascript\nvar request = new XMLHttpRequest(); //创建XHR对象\nrequest.open(\"GET\",\"get.php\",true);\nrequest.send();\n\n//创建信息\nrequest.open(\"POST\",\"post.php\",true);\nrequest.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");\n//头信息，提示服务器要发送一个表单\nrequest.send(\"name=tom&sex=man\");\n```\n* 响应请求\n\t* `responseText`：获得字符串形式的响应数据\n\t* `responseXML`：获得XML形式的响应数据（XML交互较少，一般采用json）\n\t* `status&statusText`：以数字和文本形式返回HTTP状态码\n\t* `getAllResponseHeader()`：获取所有的响应报头\n\t* `getResponseHeader()`：查询响应中的某个字段的值\n\n* 监听服务器响应\n**readyState属性：** 代表服务器响应的变化\n\t* 0：请求未初始化，open还没有调用\n\t* 1：服务器连接已经建立，open已经调用\n\t* 2：请求已接收，也就是接收到头信息了\n\t* 3：请求处理中，也就是接收到响应主体了\n\t* 4：请求已完成，且响应已就绪（完成）\n```javascript\nvar request = new XMLHttpRequest();\nrequest.open(\"GET\",\"get.php\",true);\nrequest.send();\nrequest.onreadystatechange = function() {\n\tif(request.readyState === 4 && request.status === 200){\n\t\t//request.responseText...\n\t}\n}\n```\n\n## 用jQuery实现AJAX\n* `jQuery.ajax([settings])`\n\t* `type`：类型，“POST”或“GET\",默认\"GET\"\n\t* `url`：发送请求的地址\n\t* `data`：是一个对象，连同请求发送到服务器的数据\n\t* `dataType`：预期服务器返回的数据类型。如果不指定，jQuery将自动根据HTTP包MIME信息来只能判断，一般采用**json格式**，可以设置为**\"json\"**\n\t* `success`：是一个方法，请求成功后的回调函数。传入返回后的数据，以及包含成功代码的字符串\n\t* `error`：是一个方法，请求失败时调用此函数。传入XHR对象\n```javascript\n$.ajax({\n\ttype:\"GET\",\n\turl:\"get.php\",\n\tdataType:\"json\",\n\tsuccess:function(data){\n\t\t//成功后的操作\n\t},\n\terror:function(jqXHR){\n\t\talert(\"error:\"+jqXHR.status);\n\t}\n})\n\n$.ajax({\n\ttype:\"POST\",\n\turl:\"get.php\",\n\tdataType:\"json\",\n\tdata:{\n\t\tname:123\n\t\tnumber:123\n\t\t//jquery可以自动将Form Data转换成name:123&number:123这种格式\n\t\t//并自动设置Content-Type:application/x-www-form-urlencoded\n\t},\n\tsuccess:function(data){\n\t\t//成功后的操作\n\t},\n\terror:function(jqXHR){\n\t\talert(\"error:\"+jqXHR.status);\n\t}\n})\n```\n\n## 跨域\n* 一个域名地址的组成：`http://www.abc.com:8080/scripts/jquery.js`\n\t* 协议：http://\n\t* 子域名：www\n\t* 主域名：abc.com\n\t* 端口号：8080（默认8080，可以省略）\n\t* 请求资源地址：scripts/jquery.js\n* 当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域\n* 不同域之间相互请求资源，算作“跨域”\n  比如：`http://www.abc.com/index.html` 请求 `http://www.efg.com/service.php`\n* JavaScript出于安全方面的考虑，不允许跨域调用其他页面的对象。简单说就是a.com域名下的js无法操作b.com或者c.a.com域名下的对象\n\n## 处理跨域的方法\n* 代理\n  通过在同域名的web服务器端创建一个代理：\n  北京服务器：`www.beijing.com`\n  上海服务器：`www.shanghai.com`\n  在北京的web服务器的后台`www.beijing.com/proxy-shanghaiservice.php`来调用`www.shanghai.com/service.php`的服务器，然后把响应结果返回给前端，这样前端调用北京同域名的服务就和调用上海的服务效果相同了\n* JSONP\n  JSONP可用于解决主流浏览器的跨域数据访问的问题（json+padding，内填充）\n\n```html\n在www.aaa.com中\n <script>\n function jsonp(json){\n \talert(json[\"name\"]);\n }\n </script>\n <script src=\"http://www.bbb.com/jsonp.js\"></script>\n\n 在www.bbb.com中\n jsonp({\"name\":\"tom\",\"age\":27});\n```\n```javascript\n//jsonp只支持get请求\n$.ajax({\n\ttype:\"GET\",\n\turl:\"http://www.bbb.com/service.php\",\n\tdataType:\"jsonp\",\n\tjsonp:\"callback\",//取值任意，与后端相连接\n\tsuccess:function(data){\n\t\t//成功后的操作\n\t},\n\terror:function(jqXHR){\n\t\talert(\"error:\"+jqXHR.status);\n\t}\n})\n```\n* XHR2\n  HTML5提供的XMLHttpRequest Level2已经实现了跨域访问以及其他的一些新功能（不支持IE10以下）\n  在服务器端做一些小改造即可：\n  `header('Access-Control-Allow-Origin:*');`\n  `header('Access-Control-Allow-Methods:POST,GET');`",[[1558700258155,["70431@DESKTOP-QB0HG1K",[[-1,52,"["]],[53,53],[52,52]]],[1558700258472,["70431@DESKTOP-QB0HG1K",[[1,52,"\n"]],[52,52],[53,53]]],[1558700260108,["70431@DESKTOP-QB0HG1K",[[1,53,"  - "]],[53,53],[57,57]]],[1558700261848,["70431@DESKTOP-QB0HG1K",[[-1,61,"]"]],[62,62],[61,61]]],[1558700263626,["70431@DESKTOP-QB0HG1K",[[1,46,"\n"]],[45,45],[46,46]]],[1558700263851,["70431@DESKTOP-QB0HG1K",[[1,46,"categories: 知识碎片"]],[46,46],[62,62]]]],null,"70431@DESKTOP-QB0HG1K"]]}