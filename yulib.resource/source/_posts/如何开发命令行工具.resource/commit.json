{"compress":true,"commitItems":[["d8a9db37-7fdd-4feb-801f-60ef3276268a",1560434604869,"---\ntitle: 如何开发命令行工具\ndate: 2019-06-04 22:46:46\ncategories: node相关\ntags:\n  - node\n  - fet源码\n  - cli工具\n---\n\n这是基于新哥的脚手架工具fet源码阅读的学习笔记第一篇，主要内容是如何基于`node`和其他的一些工具包来完成一些简单的命令行小工具。主要实践为一个批量重命名的命令行工具（巨简单的那种），大概梳理流程和思路。\n\n## 原理\n\n在`node`中，有一个变量叫做`process`的全局变量，当启动一个 Node.js 进程时，我们可以通过`process.argv`获得传入的命令行参数。\n![](https://github.com/Yx1aoq1/Yx1aoq1.github.io/raw/master/images/ys-1.png)\n其中：\n* `argv[0]`为[`process.execPath`](http://nodejs.cn/s/MCrAya)\n* `argv[1]`为正在执行 JavaScript 文件的路径\n* 其余元素是任何其他命令行参数\n\n通过解析`process.argv`，我们就可以执行不同的操作。\n\n##  commander.js\n\n我们可以引用`commander.js`，让命令行变得更加简单。\n下面简单示例一个图片重命名的node实现。\n```js\nvar program = require('commander')\nvar fs = require('fs')\nvar path = './'\n\nprogram\n  .version('0.0.1')\n  .description('a test cli program')\n\nprogram\n  .command('rename <format>') // 设置指令\n  .option('-n, --number <number>', '设置rename数字，默认从1开始', 1) // 设置参数\n  .option('-a, --after', '将fomat字符固定在数字后，默认在前')\n  .action(function (format, opts) { // 执行操作\n    fs.readdir(path, function(err, files) {\n      files.map(function(filename) {\n        var extname = getExtname(filename)\n        if (isImage(extname)) {\n          var newname = getNewName(format, opts, extname)\n          fs.rename(filename, newname, function(err) {\n            console.log(filename + ' --> ' + newname)\n          })\n        }\n      })\n    })\n  })\n\nprogram.parse(process.argv)\n\nfunction isImage (extname) {\n  var imageTypes = ['webp', 'png', 'svg', 'gif', 'jpg', 'jpeg', 'bmp']\n  return imageTypes.includes(extname)\n}\n\nfunction getExtname (filename) {\n  var filenameWithoutSuffix = filename.split(/#|\\?/)[0]\n  return (/[^./\\\\]*$/.exec(filenameWithoutSuffix) || [''])[0]\n}\n\nfunction getNewName (format, opts, extname) {\n  return opts.after\n         ? (opts.number ++) + format + '.' + extname\n         : format + (opts.number ++) + '.' + extname\n}\n```\n\n运行结果如图所示：\n![](https://github.com/Yx1aoq1/Yx1aoq1.github.io/raw/master/images/ys-2.png)\n",[[1560434590317,["70431@DESKTOP-QB0HG1K",[[1,1822,"yu"]],[1822,1822],[1821,1824]]],[1560434591321,["70431@DESKTOP-QB0HG1K",[[-1,1821,"\nyu\n"],[1,1825,"运行"]],[1821,1821],[1823,1823]]],[1560434592137,["70431@DESKTOP-QB0HG1K",[[-1,1821,"运行"]],[1823,1823],[1821,1821]]],[1560434592588,["70431@DESKTOP-QB0HG1K",[[1,1822,"\n"]],[1821,1821],[1822,1822]]],[1560434593133,["70431@DESKTOP-QB0HG1K",[[1,1823,"\n"]],[1822,1822],[1823,1823]]],[1560434594587,["70431@DESKTOP-QB0HG1K",[[-1,1823,"\n"],[1,1824,"运行"]],[1823,1823],[1825,1825]]],[1560434598203,["70431@DESKTOP-QB0HG1K",[[1,1825,"结果如图所示："]],[1825,1825],[1832,1832]]],[1560434598550,["70431@DESKTOP-QB0HG1K",[[1,1832,"\n\n"]],[1832,1832],[1833,1833]]],[1560434599119,["70431@DESKTOP-QB0HG1K",[[1,1833,"![](https://github.com/Yx1aoq1/Yx1aoq1.github.io/raw/master/images/ys-1.png)"]],[1833,1833],[1909,1909]]],[1560434601786,["70431@DESKTOP-QB0HG1K",[[-1,1903,"1"]],[1904,1904],[1903,1903]]],[1560434601950,["70431@DESKTOP-QB0HG1K",[[1,1903,"2"]],[1903,1903],[1904,1904]]],[1560434627519,[null,[[-1,1821,"运\n运行结果如图所示：\n![](https://github.com/Yx1aoq1/Yx1aoq1.github.io/raw/master/images/ys-2.png)\n"],[1,1910,"\n\n运"]],[1821,1821],[1913,1913]]],[1560434627520,[null,[[1,1821,"运\n运行结果如图所示：\n![](https://github.com/Yx1aoq1/Yx1aoq1.github.io/raw/master/images/ys-2.png)\n"],[-1,1821,"\n\n运"]],[1913,1913],[1821,1821]]],[1560434614887,["70431@DESKTOP-QB0HG1K",[[1,1910,"\n"]],[1909,1909],[1910,1910]]],[1560434615653,["70431@DESKTOP-QB0HG1K",[[1,1911,"\n"]],[1910,1910],[1911,1911]]],[1560434622410,["70431@DESKTOP-QB0HG1K",[[-1,1911,"\n"],[1,1912,"#"]],[1911,1911],[1912,1912]]],[1560434623150,["70431@DESKTOP-QB0HG1K",[[1,1912,"# "]],[1912,1912],[1914,1914]]],[1560434625619,["70431@DESKTOP-QB0HG1K",[[-1,1912,"# "]],[1914,1914],[1912,1912]]],[1560434625981,["70431@DESKTOP-QB0HG1K",[[-1,1911,"#"],[1,1912,"\n"]],[1912,1912],[1911,1911]]],[1560434626767,["70431@DESKTOP-QB0HG1K",[[-1,1911,"\n"]],[1911,1911],[1910,1910]]]],null,"70431@DESKTOP-QB0HG1K"]]}