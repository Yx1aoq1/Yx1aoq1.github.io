{"compress":true,"commitItems":[["9231696e-5b64-4778-8df6-d9ffadf9b45b",1558699047794,"---\ntitle: JS之this指针笔记\ndate: 2017-07-08 13:48:43\ntags: [JavaScript]\n---\n## this指针\n> this是Javascript语言的一个关键字。它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用。随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，调用函数的那个对象。\n\n* **定义在全局中的函数**\n```javascript\nfunction test() {\n  this.x = 1; //此处的this指的是window\n}\nx = 0; //在全局修改这个x，函数中这个this.x也是会一起改变的\n```\n* **作为对象方法的调用**\n```javascript\nfunction test() {\n  alert(this.x);\n}\n\nvar o = {};\no.x = 1;\no.m = test;\no.m(); //1\n```\n* **作为构造函数调用**\n```javascript\nvar o = {\n  test: function () {\n    this.x = 1;\n  } //这是定义在对象中的函数，而此时this指的是对象o\n}\n```\n## this指向的改变\n```javascript\nvar o = {\n  test: function () {\n    //在构造函数的时候也会调用其他的函数，所以this的指向就会变\n    $(this.xx).on(\"click\",function(){\n      //比如调用了on绑定事件的函数，那么这个函数里的this就不是对象o了\n    })\n  } \n}\n```\n在javascript中有几个函数是可以改变this的指向的\n```javascript\nvar xm = {\n  name: \"小明\",\n  sex: \"男\",\n  age: \"18\",\n  say: function() {\n    alert(this.name + \",\" + this.sex + \",\" + this.age);\n  }\n}\n\nvar xh = {\n  name: \"小红\",\n  sex: \"女\",\n  age: \"20\"\n}\n```\n* `apply(thisObj,[argArray])`\n参数：替换目标对象（如果为空，则指的是window对象），数组（存放所需要的参数）\n定义：应用某一对象的一个方法，用另一个对象替换当前对象\n```javascript\nxm.say.apply(xh); //小红,女,20\n```\n\n* `call(thisObj,arg1,arg2...)`\n参数：替换目标对象，需要的参数arg1,arg2...\n定义：应用某一对象的一个方法，用另一个对象替换当前对象\n```javascript\nxm.say.call(xh); //小红,女,20\n```\n\n* `bind(thisObj)(arg1,arg2...)`\n参数：替换目标对象，需要的参数arg1,arg2...\n定义：创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind()方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。\n说明：bind是在EcmaScript5中扩展的方法（IE6,7,8不支持）\n```javascript\nxm.say.bind(xh)(); //小红,女,20\n```\n\n* `$.proxy(fn,context)`\n参数：函数，函数所在的对象的名称\n定义：用于向上下文指向不同对象的元素添加事件。\n```javascript\ntest = function() {\n  this.txt = \"这是一个对象属性\";\n  $(\"div\").click($.proxy(this.myClick,this));\n  //本来调用click的话，this会指向div，但是使用$.proxy后this还是test\n};\n\ntest.prototype.myClick = function(event) {\n  alert(this.txt);\n  alert(event.currentTarget.nodeName);\n};\n\nvar x = new test();\n```\n",[[1558699046706,["70431@DESKTOP-QB0HG1K",[[1,196,"\n"]],[194,194],[195,195]]],[1558699046938,["70431@DESKTOP-QB0HG1K",[[1,197,"\n"]],[195,195],[196,196]]],[1558699047230,["70431@DESKTOP-QB0HG1K",[[1,196,"<!-- more -->"]],[196,196],[209,209]]]],null,"70431@DESKTOP-QB0HG1K"],["71eaba58-db58-4071-8e89-8715dd6350c5",1558699942111,"---\ntitle: JS之this指针笔记\ndate: 2017-07-08 13:48:43\ntags: [JavaScript]\n---\n## this指针\n> this是Javascript语言的一个关键字。它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用。随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，调用函数的那个对象。\n\n<!-- more -->\n\n* **定义在全局中的函数**\n```javascript\nfunction test() {\n  this.x = 1; //此处的this指的是window\n}\nx = 0; //在全局修改这个x，函数中这个this.x也是会一起改变的\n```\n* **作为对象方法的调用**\n```javascript\nfunction test() {\n  alert(this.x);\n}\n\nvar o = {};\no.x = 1;\no.m = test;\no.m(); //1\n```\n* **作为构造函数调用**\n```javascript\nvar o = {\n  test: function () {\n    this.x = 1;\n  } //这是定义在对象中的函数，而此时this指的是对象o\n}\n```\n## this指向的改变\n```javascript\nvar o = {\n  test: function () {\n    //在构造函数的时候也会调用其他的函数，所以this的指向就会变\n    $(this.xx).on(\"click\",function(){\n      //比如调用了on绑定事件的函数，那么这个函数里的this就不是对象o了\n    })\n  } \n}\n```\n在javascript中有几个函数是可以改变this的指向的\n```javascript\nvar xm = {\n  name: \"小明\",\n  sex: \"男\",\n  age: \"18\",\n  say: function() {\n    alert(this.name + \",\" + this.sex + \",\" + this.age);\n  }\n}\n\nvar xh = {\n  name: \"小红\",\n  sex: \"女\",\n  age: \"20\"\n}\n```\n* `apply(thisObj,[argArray])`\n参数：替换目标对象（如果为空，则指的是window对象），数组（存放所需要的参数）\n定义：应用某一对象的一个方法，用另一个对象替换当前对象\n```javascript\nxm.say.apply(xh); //小红,女,20\n```\n\n* `call(thisObj,arg1,arg2...)`\n参数：替换目标对象，需要的参数arg1,arg2...\n定义：应用某一对象的一个方法，用另一个对象替换当前对象\n```javascript\nxm.say.call(xh); //小红,女,20\n```\n\n* `bind(thisObj)(arg1,arg2...)`\n参数：替换目标对象，需要的参数arg1,arg2...\n定义：创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind()方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。\n说明：bind是在EcmaScript5中扩展的方法（IE6,7,8不支持）\n```javascript\nxm.say.bind(xh)(); //小红,女,20\n```\n\n* `$.proxy(fn,context)`\n参数：函数，函数所在的对象的名称\n定义：用于向上下文指向不同对象的元素添加事件。\n```javascript\ntest = function() {\n  this.txt = \"这是一个对象属性\";\n  $(\"div\").click($.proxy(this.myClick,this));\n  //本来调用click的话，this会指向div，但是使用$.proxy后this还是test\n};\n\ntest.prototype.myClick = function(event) {\n  alert(this.txt);\n  alert(event.currentTarget.nodeName);\n};\n\nvar x = new test();\n```\n",[[1558699936902,["70431@DESKTOP-QB0HG1K",[[1,211,"\n"]],[209,209],[210,210]]],[1558699937284,["70431@DESKTOP-QB0HG1K",[[1,212,"\n"]],[210,210],[211,211]]],[1558699937579,["70431@DESKTOP-QB0HG1K",[[1,211,"## this指针\n> this是Javascript语言的一个关键字。它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用。随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，调用函数的那个对象。\n\n<!-- more -->"]],[211,211],[348,348]]],[1558699940254,["70431@DESKTOP-QB0HG1K",[[-1,335,"<!-- more -->"]],[348,348],[335,335]]],[1558699940593,["70431@DESKTOP-QB0HG1K",[[-1,336,"\n"]],[335,335],[334,334]]],[1558699940930,["70431@DESKTOP-QB0HG1K",[[-1,335,"\n"]],[334,334],[333,333]]]],null,"70431@DESKTOP-QB0HG1K"],["5e32873d-94fb-4150-bd0a-d47b5e6493a7",1558700169850,"---\ntitle: JS之this指针笔记\ndate: 2017-07-08 13:48:43\ntags: [JavaScript]\n---\n## this指针\n> this是Javascript语言的一个关键字。它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用。随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，调用函数的那个对象。\n\n<!-- more -->\n\n## this指针\n> this是Javascript语言的一个关键字。它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用。随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，调用函数的那个对象。\n\n* **定义在全局中的函数**\n```javascript\nfunction test() {\n  this.x = 1; //此处的this指的是window\n}\nx = 0; //在全局修改这个x，函数中这个this.x也是会一起改变的\n```\n* **作为对象方法的调用**\n```javascript\nfunction test() {\n  alert(this.x);\n}\n\nvar o = {};\no.x = 1;\no.m = test;\no.m(); //1\n```\n* **作为构造函数调用**\n```javascript\nvar o = {\n  test: function () {\n    this.x = 1;\n  } //这是定义在对象中的函数，而此时this指的是对象o\n}\n```\n## this指向的改变\n```javascript\nvar o = {\n  test: function () {\n    //在构造函数的时候也会调用其他的函数，所以this的指向就会变\n    $(this.xx).on(\"click\",function(){\n      //比如调用了on绑定事件的函数，那么这个函数里的this就不是对象o了\n    })\n  } \n}\n```\n在javascript中有几个函数是可以改变this的指向的\n```javascript\nvar xm = {\n  name: \"小明\",\n  sex: \"男\",\n  age: \"18\",\n  say: function() {\n    alert(this.name + \",\" + this.sex + \",\" + this.age);\n  }\n}\n\nvar xh = {\n  name: \"小红\",\n  sex: \"女\",\n  age: \"20\"\n}\n```\n* `apply(thisObj,[argArray])`\n参数：替换目标对象（如果为空，则指的是window对象），数组（存放所需要的参数）\n定义：应用某一对象的一个方法，用另一个对象替换当前对象\n```javascript\nxm.say.apply(xh); //小红,女,20\n```\n\n* `call(thisObj,arg1,arg2...)`\n参数：替换目标对象，需要的参数arg1,arg2...\n定义：应用某一对象的一个方法，用另一个对象替换当前对象\n```javascript\nxm.say.call(xh); //小红,女,20\n```\n\n* `bind(thisObj)(arg1,arg2...)`\n参数：替换目标对象，需要的参数arg1,arg2...\n定义：创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind()方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。\n说明：bind是在EcmaScript5中扩展的方法（IE6,7,8不支持）\n```javascript\nxm.say.bind(xh)(); //小红,女,20\n```\n\n* `$.proxy(fn,context)`\n参数：函数，函数所在的对象的名称\n定义：用于向上下文指向不同对象的元素添加事件。\n```javascript\ntest = function() {\n  this.txt = \"这是一个对象属性\";\n  $(\"div\").click($.proxy(this.myClick,this));\n  //本来调用click的话，this会指向div，但是使用$.proxy后this还是test\n};\n\ntest.prototype.myClick = function(event) {\n  alert(this.txt);\n  alert(event.currentTarget.nodeName);\n};\n\nvar x = new test();\n```\n",[[1558700169149,["70431@DESKTOP-QB0HG1K",[[1,49,"categories: JS相关\n"],[-1,55,"["],[1,56,"\n  - "],[-1,66,"]"]],[49,67],[87,87]]]],null,"70431@DESKTOP-QB0HG1K"]]}