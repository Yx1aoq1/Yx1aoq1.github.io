{"compress":true,"commitItems":[["96e9c994-b57b-48e7-8616-e38edc9caf18",1558699951766,"---\ntitle: JSON学习笔记\ndate: 2017-03-21 18:16:43\ntags: [JSON]\n---\n> JSON = JavaScript Object Notation （JavaScript对象表示法）\n> JSON 是存储和交换文本信息的语法，类似XML。它采用键值对的方式来组织，易于人们阅读和编写，同时也易于及其解析和生成\n> JSON 是独立于语言的，也就是说不管什么语言，都可以解析json，只需要按照json的规则来就行\n\n<!--more-->\n\n## 与XML比较\n* 长度比xml短\n* 读写速度更快\n* json可以使用Javascript内建的方法直接进行解析，转换成Javascript对象，非常方便\n\n## 语法规则\n* JSON数据的书写格式：名称/值对\n名称/值对组合中的名称写在前面（在双引号中），值对写在后面（同样在双引号中），中间用冒号隔开：比如`\"name\":\"jane\"`\n* 可以使用的数据类型\n\t* 数字（整数或浮点数）\n\t* 字符串（双引号）\n\t* 逻辑值（true or false）\n\t* 数组（ [...] ）\n\t* 对象（ {...} ）\n\t* null\n\n## JSON解析\n* eval和JSON.parse\n* 尽可能使用`JSON.parse()`方法解析字符串本身，该方法可以捕捉JSON中的语法错误。eval使用存在风险，特别是第三方JSON数据存在恶意代码时。\n```javascript\nvar jsondata = '{\"staff\":[{\"name\":\"aaa\",\"age\":70},{\"name\":\"bbb\",\"age\":12}]}';\nvar jsonobj = JSON.parse(jsondata);\n//解析完毕\nalert(jsonobj.staff[0].name);\n//直接对对象进行操作\n```\n* **tip：** `JSON.stringify()`方法是将对象解析成JSON\n```javascript\nvar a = {a:1,b:2}\nJSON.stringify(a) //\"{\"a\":1,\"b\":2}\"\n```",[[1558699946959,["70431@DESKTOP-QB0HG1K",[[1,246,"\n"]],[244,244],[245,245]]],[1558699947431,["70431@DESKTOP-QB0HG1K",[[1,247,"\n"]],[245,245],[246,246]]],[1558699947702,["70431@DESKTOP-QB0HG1K",[[1,246,"> JSON = JavaScript Object Notation （JavaScript对象表示法）\n> JSON 是存储和交换文本信息的语法，类似XML。它采用键值对的方式来组织，易于人们阅读和编写，同时也易于及其解析和生成\n> JSON 是独立于语言的，也就是说不管什么语言，都可以解析json，只需要按照json的规则来就行\n\n<!--more-->"]],[246,246],[427,427]]],[1558699950283,["70431@DESKTOP-QB0HG1K",[[-1,416,"<!--more-->\n"]],[415,427],[415,415]]],[1558699950562,["70431@DESKTOP-QB0HG1K",[[-1,416,"\n"]],[415,415],[414,414]]]],null,"70431@DESKTOP-QB0HG1K"],["68b109f0-8317-4926-a292-50c658a72433",1558700191145,"---\ntitle: JSON学习笔记\ndate: 2017-03-21 18:16:43\ntags: [JSON]\n---\n> JSON = JavaScript Object Notation （JavaScript对象表示法）\n> JSON 是存储和交换文本信息的语法，类似XML。它采用键值对的方式来组织，易于人们阅读和编写，同时也易于及其解析和生成\n> JSON 是独立于语言的，也就是说不管什么语言，都可以解析json，只需要按照json的规则来就行\n\n<!--more-->\n\n> JSON = JavaScript Object Notation （JavaScript对象表示法）\n> JSON 是存储和交换文本信息的语法，类似XML。它采用键值对的方式来组织，易于人们阅读和编写，同时也易于及其解析和生成\n> JSON 是独立于语言的，也就是说不管什么语言，都可以解析json，只需要按照json的规则来就行\n\n## 与XML比较\n* 长度比xml短\n* 读写速度更快\n* json可以使用Javascript内建的方法直接进行解析，转换成Javascript对象，非常方便\n\n## 语法规则\n* JSON数据的书写格式：名称/值对\n名称/值对组合中的名称写在前面（在双引号中），值对写在后面（同样在双引号中），中间用冒号隔开：比如`\"name\":\"jane\"`\n* 可以使用的数据类型\n\t* 数字（整数或浮点数）\n\t* 字符串（双引号）\n\t* 逻辑值（true or false）\n\t* 数组（ [...] ）\n\t* 对象（ {...} ）\n\t* null\n\n## JSON解析\n* eval和JSON.parse\n* 尽可能使用`JSON.parse()`方法解析字符串本身，该方法可以捕捉JSON中的语法错误。eval使用存在风险，特别是第三方JSON数据存在恶意代码时。\n```javascript\nvar jsondata = '{\"staff\":[{\"name\":\"aaa\",\"age\":70},{\"name\":\"bbb\",\"age\":12}]}';\nvar jsonobj = JSON.parse(jsondata);\n//解析完毕\nalert(jsonobj.staff[0].name);\n//直接对对象进行操作\n```\n* **tip：** `JSON.stringify()`方法是将对象解析成JSON\n```javascript\nvar a = {a:1,b:2}\nJSON.stringify(a) //\"{\"a\":1,\"b\":2}\"\n```",[[1558700173605,["70431@DESKTOP-QB0HG1K",[[-1,52,"["]],[53,53],[52,52]]],[1558700174211,["70431@DESKTOP-QB0HG1K",[[1,52,"\n"]],[52,52],[53,53]]],[1558700175565,["70431@DESKTOP-QB0HG1K",[[1,53,"  - "]],[53,53],[57,57]]],[1558700177790,["70431@DESKTOP-QB0HG1K",[[-1,61,"]"]],[62,62],[61,61]]],[1558700180100,["70431@DESKTOP-QB0HG1K",[[1,46,"\n"]],[45,45],[46,46]]],[1558700180241,["70431@DESKTOP-QB0HG1K",[[1,46,"categories: JS相关\ntags: \n  - JavaScript"]],[46,46],[84,84]]],[1558700183930,["70431@DESKTOP-QB0HG1K",[[-1,63,"tags: \n  - JavaScript"]],[84,84],[63,63]]],[1558700184316,["70431@DESKTOP-QB0HG1K",[[-1,63,"\n"]],[63,63],[62,62]]],[1558700185303,["70431@DESKTOP-QB0HG1K",[[-1,58,"JS相关"]],[62,62],[58,58]]],[1558700186451,["70431@DESKTOP-QB0HG1K",[[1,58,"zhi"]],[58,58],[61,61]]],[1558700187103,["70431@DESKTOP-QB0HG1K",[[-1,58,"zhi"]],[61,61],[58,58]]],[1558700190517,["70431@DESKTOP-QB0HG1K",[[1,58,"知识碎片"]],[58,58],[62,62]]]],null,"70431@DESKTOP-QB0HG1K"]]}