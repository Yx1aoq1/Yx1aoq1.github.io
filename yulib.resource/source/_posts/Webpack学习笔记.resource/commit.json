{"compress":true,"commitItems":[["95c2f755-ceee-4f18-af43-03b3dfa68660",1558698911127,"---\ntitle: Webpack学习笔记\ndate: 2018-01-15 14:13:32\ntags: [Webpack]\n---\n## Webpack 基本介绍\n\n▼ **什么是Webpack：**\nwebpack是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。\n我们可以直接使用 require(XXX) 的形式来引入各模块，即使它们可能需要经过编译（比如JSX和sass），但我们无须在上面花费太多心思，因为 webpack 有着各种健全的加载器（loader）在默默处理这些事情。\n\n▼ **为什那么要使用Webpack：**\n现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的JavaScript代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法：\n* **模块化**，让我们可以把复杂的程序细化为小的文件；\n* 类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能转换为JavaScript文件使浏览器可以识别；\n* Scss，less等CSS预处理器；\n* ...\n\n这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常繁琐的，这就为Webpack类的工具的出现提供了需求。\n\n## Webpack 的使用\n\n### 安装\n我们常规直接使用 npm 的形式来安装（全局安装）：\n```\n$ npm install webpack -g\n```\n如果常规项目还是把依赖写入 package.json 包更人性化（局部安装）：\n```\n$ npm init // 生成package.json文件，写入一些如作者、版本等基本信息\n$ npm install webpack --save-dev\n```\n\n### 配置\n每个项目下都必须配置有一个 webpack.config.js，就是一个配置项，告诉 webpack 它需要做什么。\n```js\nvar webpack = require('webpack');\nvar commonsPlugin = new webpack.optimize.CommonsChunkPlugin('common.js');\n\nmodule.exports = {\n  //插件项\n  plugins: [commonsPlugin],\n  //页面入口文件配置\n  entry: {\n    index : './src/js/page/index.js'\n  },\n  //入口文件输出配置\n  output: {\n    path: 'dist/js/page',\n    filename: '[name].js'\n  },\n  module: {\n    //加载器配置\n    loaders: [\n      { test: /\\.css$/, loader: 'style-loader!css-loader' },\n      { test: /\\.js$/, loader: 'jsx-loader?harmony' },\n      { test: /\\.scss$/, loader: 'style!css!sass?sourceMap'},\n      { test: /\\.(png|jpg)$/, loader: 'url-loader?limit=8192'}\n    ]\n  },\n  //其它解决方案配置\n  resolve: {\n    root: 'E:/github/flux-example/src', //绝对路径\n    extensions: ['', '.js', '.json', '.scss'],\n    alias: {\n      AppStore : 'js/stores/AppStores.js',\n      ActionType : 'js/actions/ActionType.js',\n      AppAction : 'js/actions/AppAction.js'\n    }\n  }\n};\n```\n▼ **plugins：**\n插件项，这里我们使用了一个 CommonsChunkPlugin 的插件，它用于提取多个入口文件的公共脚本部分，然后生成一个 common.js 来方便多页面之间进行复用。\n▼ **entry：**\n页面入口文件配置，output 是对应输出项配置（即入口文件最终要生成什么名字的文件、存放到哪里），其语法大致为：\n```js\n{\n  entry: {\n    page1: \"./page1\",\n    //支持数组形式，将加载数组中的所有模块，但以最后一个模块作为输出\n    page2: [\"./entry1\", \"./entry2\"]\n  },\n  output: {\n   path: \"dist/js/page\",\n   filename: \"[name].bundle.js\"\n  }\n}\n```\n该段代码最终会生成一个 page1.bundle.js 和 page2.bundle.js，并存放到 ./dist/js/page 文件夹下。\n▼ **module.loaders：**\n告知 webpack 每一种文件都需要使用什么加载器来处理：\n```js\nmodule: {\n  //加载器配置\n  loaders: [\n    //.css 文件使用 style-loader 和 css-loader 来处理\n    { test: /\\.css$/, loader: 'style-loader!css-loader' },\n    //.js 文件使用 jsx-loader 来编译处理\n    { test: /\\.js$/, loader: 'jsx-loader?harmony' },\n    //.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理\n    { test: /\\.scss$/, loader: 'style!css!sass?sourceMap'},\n    //图片文件使用 url-loader 来处理，小于8kb的直接转为base64\n    { test: /\\.(png|jpg)$/, loader: 'url-loader?limit=8192'}\n  ]\n}\n```\n如上，\"-loader\"其实是可以省略不写的，多个loader之间用“!”连接起来。\n**所有的加载器都需要通过 npm 来加载，并建议查阅它们对应的 readme 来看看如何使用。**\n如：url-loader，它会将样式中引用到的图片转为模块来处理，使用该加载器需要先进行安装：\n```\nnpm install url-loader -save-dev\n```\n配置信息的参数“?limit=8192”表示将所有小于8kb的图片都转为base64形式（其实应该说超过8kb的才使用 url-loader 来映射到文件，否则转为data url形式）。\n▼ **resolve：**\n其它解决方案配置\n```js\nresolve: {\n  //查找module的话从这里开始查找\n  root: 'E:/github/flux-example/src', //绝对路径\n  //自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名\n  extensions: ['', '.js', '.json', '.scss'],\n  //模块别名定义，方便后续直接引用别名，无须多写长长的地址\n  alias: {\n    AppStore : 'js/stores/AppStores.js',//后续直接 require('AppStore') 即可\n    ActionType : 'js/actions/ActionType.js',\n    AppAction : 'js/actions/AppAction.js'\n  }\n}\n```\n### 运行\n\n```\n$ webpack --display-error-details\n```\n后面的参数“--display-error-details”是推荐加上的，方便出错时能查阅更详尽的信息（比如 webpack 寻找模块的过程），从而更好定位到问题。\n其他主要的参数有：\n```\n$ webpack --config XXX.js   //使用另一份配置文件（比如webpack.config2.js）来打包\n$ webpack --watch   //监听变动并自动打包\n$ webpack -p    //压缩混淆脚本，这个非常非常重要！\n$ webpack -d    //生成map映射文件，告知哪些模块被最终打包到哪里了\n```\n\n## 实战应用\n\n项目文件夹结构如下图：\n![](https://github.com/Yx1aoq1/Yx1aoq1.github.io/raw/master/images/webpack-1.png)\n\n* src目录下的文件夹存放源代码，dist目录下存放打包过后的代码\n```js\nvar path = require('path');\nvar webpack = require('webpack');\n\nmodule.exports = {\n  entry: './src/index.js', // 以index.js为入口\n  output: {\n    filename: 'js/canvas-filter.bundle.js', // 打包后生成的文件\n    path: path.resolve(__dirname,'./dist') // 使用绝对路径\n  },\n  module: {\n    rules: [\n      { // 使js中能够require css 文件的loader\n        test: /\\.css$/,\n        use: [\n          'style-loader',\n          { loader: 'css-loader', options: { importLoaders: 1 } },\n          'postcss-loader'\n        ]\n      },\n      { // 使得less文件能够解析成css的loader\n        test: /\\.less$/,\n        use: [\n          'style-loader',\n          { loader: 'css-loader', options: { importLoaders: 1 } },\n          'less-loader',\n          'postcss-loader'\n        ]\n      },\n      { // 使得能够正确引用图片文件路径的loader\n        test: /\\.(png|jpg|gif|svg)$/i,\n        loader: 'file-loader'\n      }\n    ]\n  },\n  plugins: [\n    // 再项目中使用jquery时所需要的配置\n    new webpack.ProvidePlugin({\n      $: 'jquery',\n      jQuery: 'jquery',\n      'window.jQuery': 'jquery',\n      'window.$': 'jquery'\n    }),\n    new webpack.HotModuleReplacementPlugin()\n  ],\n  devServer: {\n    // 使用webpack-dev-server，开启本地服务器\n    hot: true,\n    inline: true\n  }\n}\n```\n\n",[[1558698909840,["70431@DESKTOP-QB0HG1K",[[1,300,"\n"]],[298,298],[299,299]]],[1558698910250,["70431@DESKTOP-QB0HG1K",[[1,301,"\n"]],[299,299],[300,300]]],[1558698910542,["70431@DESKTOP-QB0HG1K",[[1,300,"<!-- more -->"]],[300,300],[313,313]]]],null,"70431@DESKTOP-QB0HG1K"],["d1928e33-ac2b-4246-a50f-15265827456e",1558699383534,"---\ntitle: Webpack学习笔记\ndate: 2018-01-15 14:13:32\ntags: [Webpack]\n---\n## Webpack 基本介绍\n\n▼ **什么是Webpack：**\nwebpack是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。\n我们可以直接使用 require(XXX) 的形式来引入各模块，即使它们可能需要经过编译（比如JSX和sass），但我们无须在上面花费太多心思，因为 webpack 有着各种健全的加载器（loader）在默默处理这些事情。\n\n<!-- more -->\n\n▼ **为什那么要使用Webpack：**\n现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的JavaScript代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法：\n* **模块化**，让我们可以把复杂的程序细化为小的文件；\n* 类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能转换为JavaScript文件使浏览器可以识别；\n* Scss，less等CSS预处理器；\n* ...\n\n这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常繁琐的，这就为Webpack类的工具的出现提供了需求。\n\n## Webpack 的使用\n\n### 安装\n我们常规直接使用 npm 的形式来安装（全局安装）：\n```\n$ npm install webpack -g\n```\n如果常规项目还是把依赖写入 package.json 包更人性化（局部安装）：\n```\n$ npm init // 生成package.json文件，写入一些如作者、版本等基本信息\n$ npm install webpack --save-dev\n```\n\n### 配置\n每个项目下都必须配置有一个 webpack.config.js，就是一个配置项，告诉 webpack 它需要做什么。\n```js\nvar webpack = require('webpack');\nvar commonsPlugin = new webpack.optimize.CommonsChunkPlugin('common.js');\n\nmodule.exports = {\n  //插件项\n  plugins: [commonsPlugin],\n  //页面入口文件配置\n  entry: {\n    index : './src/js/page/index.js'\n  },\n  //入口文件输出配置\n  output: {\n    path: 'dist/js/page',\n    filename: '[name].js'\n  },\n  module: {\n    //加载器配置\n    loaders: [\n      { test: /\\.css$/, loader: 'style-loader!css-loader' },\n      { test: /\\.js$/, loader: 'jsx-loader?harmony' },\n      { test: /\\.scss$/, loader: 'style!css!sass?sourceMap'},\n      { test: /\\.(png|jpg)$/, loader: 'url-loader?limit=8192'}\n    ]\n  },\n  //其它解决方案配置\n  resolve: {\n    root: 'E:/github/flux-example/src', //绝对路径\n    extensions: ['', '.js', '.json', '.scss'],\n    alias: {\n      AppStore : 'js/stores/AppStores.js',\n      ActionType : 'js/actions/ActionType.js',\n      AppAction : 'js/actions/AppAction.js'\n    }\n  }\n};\n```\n▼ **plugins：**\n插件项，这里我们使用了一个 CommonsChunkPlugin 的插件，它用于提取多个入口文件的公共脚本部分，然后生成一个 common.js 来方便多页面之间进行复用。\n▼ **entry：**\n页面入口文件配置，output 是对应输出项配置（即入口文件最终要生成什么名字的文件、存放到哪里），其语法大致为：\n```js\n{\n  entry: {\n    page1: \"./page1\",\n    //支持数组形式，将加载数组中的所有模块，但以最后一个模块作为输出\n    page2: [\"./entry1\", \"./entry2\"]\n  },\n  output: {\n   path: \"dist/js/page\",\n   filename: \"[name].bundle.js\"\n  }\n}\n```\n该段代码最终会生成一个 page1.bundle.js 和 page2.bundle.js，并存放到 ./dist/js/page 文件夹下。\n▼ **module.loaders：**\n告知 webpack 每一种文件都需要使用什么加载器来处理：\n```js\nmodule: {\n  //加载器配置\n  loaders: [\n    //.css 文件使用 style-loader 和 css-loader 来处理\n    { test: /\\.css$/, loader: 'style-loader!css-loader' },\n    //.js 文件使用 jsx-loader 来编译处理\n    { test: /\\.js$/, loader: 'jsx-loader?harmony' },\n    //.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理\n    { test: /\\.scss$/, loader: 'style!css!sass?sourceMap'},\n    //图片文件使用 url-loader 来处理，小于8kb的直接转为base64\n    { test: /\\.(png|jpg)$/, loader: 'url-loader?limit=8192'}\n  ]\n}\n```\n如上，\"-loader\"其实是可以省略不写的，多个loader之间用“!”连接起来。\n**所有的加载器都需要通过 npm 来加载，并建议查阅它们对应的 readme 来看看如何使用。**\n如：url-loader，它会将样式中引用到的图片转为模块来处理，使用该加载器需要先进行安装：\n```\nnpm install url-loader -save-dev\n```\n配置信息的参数“?limit=8192”表示将所有小于8kb的图片都转为base64形式（其实应该说超过8kb的才使用 url-loader 来映射到文件，否则转为data url形式）。\n▼ **resolve：**\n其它解决方案配置\n```js\nresolve: {\n  //查找module的话从这里开始查找\n  root: 'E:/github/flux-example/src', //绝对路径\n  //自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名\n  extensions: ['', '.js', '.json', '.scss'],\n  //模块别名定义，方便后续直接引用别名，无须多写长长的地址\n  alias: {\n    AppStore : 'js/stores/AppStores.js',//后续直接 require('AppStore') 即可\n    ActionType : 'js/actions/ActionType.js',\n    AppAction : 'js/actions/AppAction.js'\n  }\n}\n```\n### 运行\n\n```\n$ webpack --display-error-details\n```\n后面的参数“--display-error-details”是推荐加上的，方便出错时能查阅更详尽的信息（比如 webpack 寻找模块的过程），从而更好定位到问题。\n其他主要的参数有：\n```\n$ webpack --config XXX.js   //使用另一份配置文件（比如webpack.config2.js）来打包\n$ webpack --watch   //监听变动并自动打包\n$ webpack -p    //压缩混淆脚本，这个非常非常重要！\n$ webpack -d    //生成map映射文件，告知哪些模块被最终打包到哪里了\n```\n\n## 实战应用\n\n项目文件夹结构如下图：\n![](https://github.com/Yx1aoq1/Yx1aoq1.github.io/raw/master/images/webpack-1.png)\n\n* src目录下的文件夹存放源代码，dist目录下存放打包过后的代码\n```js\nvar path = require('path');\nvar webpack = require('webpack');\n\nmodule.exports = {\n  entry: './src/index.js', // 以index.js为入口\n  output: {\n    filename: 'js/canvas-filter.bundle.js', // 打包后生成的文件\n    path: path.resolve(__dirname,'./dist') // 使用绝对路径\n  },\n  module: {\n    rules: [\n      { // 使js中能够require css 文件的loader\n        test: /\\.css$/,\n        use: [\n          'style-loader',\n          { loader: 'css-loader', options: { importLoaders: 1 } },\n          'postcss-loader'\n        ]\n      },\n      { // 使得less文件能够解析成css的loader\n        test: /\\.less$/,\n        use: [\n          'style-loader',\n          { loader: 'css-loader', options: { importLoaders: 1 } },\n          'less-loader',\n          'postcss-loader'\n        ]\n      },\n      { // 使得能够正确引用图片文件路径的loader\n        test: /\\.(png|jpg|gif|svg)$/i,\n        loader: 'file-loader'\n      }\n    ]\n  },\n  plugins: [\n    // 再项目中使用jquery时所需要的配置\n    new webpack.ProvidePlugin({\n      $: 'jquery',\n      jQuery: 'jquery',\n      'window.jQuery': 'jquery',\n      'window.$': 'jquery'\n    }),\n    new webpack.HotModuleReplacementPlugin()\n  ],\n  devServer: {\n    // 使用webpack-dev-server，开启本地服务器\n    hot: true,\n    inline: true\n  }\n}\n```\n\n",[[1558699377885,["70431@DESKTOP-QB0HG1K",[[-1,55,"["]],[56,56],[55,55]]],[1558699378363,["70431@DESKTOP-QB0HG1K",[[1,55,"\n"]],[55,55],[56,56]]],[1558699379650,["70431@DESKTOP-QB0HG1K",[[1,56,"  - "]],[56,56],[60,60]]],[1558699381627,["70431@DESKTOP-QB0HG1K",[[-1,67,"]"]],[68,68],[67,67]]],[1558699393657,["70431@DESKTOP-QB0HG1K",[[1,49,"\n"]],[48,48],[49,49]]],[1558699397153,["70431@DESKTOP-QB0HG1K",[[1,49,"categories: qw"]],[49,49],[63,63]]],[1558699397871,["70431@DESKTOP-QB0HG1K",[[-1,61,"qw"]],[63,63],[61,61]]],[1558699398006,["70431@DESKTOP-QB0HG1K",[[1,61,"w"]],[61,61],[62,62]]],[1558699398635,["70431@DESKTOP-QB0HG1K",[[-1,61,"w"]],[62,62],[61,61]]],[1558699401605,["70431@DESKTOP-QB0HG1K",[[1,61,"WebPack"]],[61,61],[68,68]]],[1558699402911,["70431@DESKTOP-QB0HG1K",[[-1,64,"Pack"]],[68,68],[64,64]]],[1558699404444,["70431@DESKTOP-QB0HG1K",[[1,64,"pack"]],[64,64],[68,68]]],[1558699411392,["70431@DESKTOP-QB0HG1K",[[-1,61,"Webpack"],[1,68,"z"]],[61,68],[62,62]]],[1558699411999,["70431@DESKTOP-QB0HG1K",[[-1,61,"z"]],[62,62],[61,61]]],[1558699416342,["70431@DESKTOP-QB0HG1K",[[1,61,"自动化构建"]],[61,61],[66,66]]],[1558699433402,["70431@DESKTOP-QB0HG1K",[[-1,61,"自动化构建"],[1,66,"x"]],[61,66],[61,62]]],[1558699434584,["70431@DESKTOP-QB0HG1K",[[-1,61,"x"],[1,62,"项目"]],[61,61],[63,63]]],[1558699435590,["70431@DESKTOP-QB0HG1K",[[1,63,"自动化"]],[63,63],[66,66]]]],null,"70431@DESKTOP-QB0HG1K"],["815c0ca7-581b-4104-8112-a8b1a7253c12",1558699761869,"---\ntitle: Webpack学习笔记\ndate: 2018-01-15 14:13:32\ncategories: 项目自动化\ntags: \n  - Webpack\n---\n## Webpack 基本介绍\n\n▼ **什么是Webpack：**\nwebpack是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。\n我们可以直接使用 require(XXX) 的形式来引入各模块，即使它们可能需要经过编译（比如JSX和sass），但我们无须在上面花费太多心思，因为 webpack 有着各种健全的加载器（loader）在默默处理这些事情。\n\n<!-- more -->\n\n▼ **为什那么要使用Webpack：**\n现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的JavaScript代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法：\n* **模块化**，让我们可以把复杂的程序细化为小的文件；\n* 类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能转换为JavaScript文件使浏览器可以识别；\n* Scss，less等CSS预处理器；\n* ...\n\n这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常繁琐的，这就为Webpack类的工具的出现提供了需求。\n\n## Webpack 的使用\n\n### 安装\n我们常规直接使用 npm 的形式来安装（全局安装）：\n```\n$ npm install webpack -g\n```\n如果常规项目还是把依赖写入 package.json 包更人性化（局部安装）：\n```\n$ npm init // 生成package.json文件，写入一些如作者、版本等基本信息\n$ npm install webpack --save-dev\n```\n\n### 配置\n每个项目下都必须配置有一个 webpack.config.js，就是一个配置项，告诉 webpack 它需要做什么。\n```js\nvar webpack = require('webpack');\nvar commonsPlugin = new webpack.optimize.CommonsChunkPlugin('common.js');\n\nmodule.exports = {\n  //插件项\n  plugins: [commonsPlugin],\n  //页面入口文件配置\n  entry: {\n    index : './src/js/page/index.js'\n  },\n  //入口文件输出配置\n  output: {\n    path: 'dist/js/page',\n    filename: '[name].js'\n  },\n  module: {\n    //加载器配置\n    loaders: [\n      { test: /\\.css$/, loader: 'style-loader!css-loader' },\n      { test: /\\.js$/, loader: 'jsx-loader?harmony' },\n      { test: /\\.scss$/, loader: 'style!css!sass?sourceMap'},\n      { test: /\\.(png|jpg)$/, loader: 'url-loader?limit=8192'}\n    ]\n  },\n  //其它解决方案配置\n  resolve: {\n    root: 'E:/github/flux-example/src', //绝对路径\n    extensions: ['', '.js', '.json', '.scss'],\n    alias: {\n      AppStore : 'js/stores/AppStores.js',\n      ActionType : 'js/actions/ActionType.js',\n      AppAction : 'js/actions/AppAction.js'\n    }\n  }\n};\n```\n▼ **plugins：**\n插件项，这里我们使用了一个 CommonsChunkPlugin 的插件，它用于提取多个入口文件的公共脚本部分，然后生成一个 common.js 来方便多页面之间进行复用。\n▼ **entry：**\n页面入口文件配置，output 是对应输出项配置（即入口文件最终要生成什么名字的文件、存放到哪里），其语法大致为：\n```js\n{\n  entry: {\n    page1: \"./page1\",\n    //支持数组形式，将加载数组中的所有模块，但以最后一个模块作为输出\n    page2: [\"./entry1\", \"./entry2\"]\n  },\n  output: {\n   path: \"dist/js/page\",\n   filename: \"[name].bundle.js\"\n  }\n}\n```\n该段代码最终会生成一个 page1.bundle.js 和 page2.bundle.js，并存放到 ./dist/js/page 文件夹下。\n▼ **module.loaders：**\n告知 webpack 每一种文件都需要使用什么加载器来处理：\n```js\nmodule: {\n  //加载器配置\n  loaders: [\n    //.css 文件使用 style-loader 和 css-loader 来处理\n    { test: /\\.css$/, loader: 'style-loader!css-loader' },\n    //.js 文件使用 jsx-loader 来编译处理\n    { test: /\\.js$/, loader: 'jsx-loader?harmony' },\n    //.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理\n    { test: /\\.scss$/, loader: 'style!css!sass?sourceMap'},\n    //图片文件使用 url-loader 来处理，小于8kb的直接转为base64\n    { test: /\\.(png|jpg)$/, loader: 'url-loader?limit=8192'}\n  ]\n}\n```\n如上，\"-loader\"其实是可以省略不写的，多个loader之间用“!”连接起来。\n**所有的加载器都需要通过 npm 来加载，并建议查阅它们对应的 readme 来看看如何使用。**\n如：url-loader，它会将样式中引用到的图片转为模块来处理，使用该加载器需要先进行安装：\n```\nnpm install url-loader -save-dev\n```\n配置信息的参数“?limit=8192”表示将所有小于8kb的图片都转为base64形式（其实应该说超过8kb的才使用 url-loader 来映射到文件，否则转为data url形式）。\n▼ **resolve：**\n其它解决方案配置\n```js\nresolve: {\n  //查找module的话从这里开始查找\n  root: 'E:/github/flux-example/src', //绝对路径\n  //自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名\n  extensions: ['', '.js', '.json', '.scss'],\n  //模块别名定义，方便后续直接引用别名，无须多写长长的地址\n  alias: {\n    AppStore : 'js/stores/AppStores.js',//后续直接 require('AppStore') 即可\n    ActionType : 'js/actions/ActionType.js',\n    AppAction : 'js/actions/AppAction.js'\n  }\n}\n```\n### 运行\n\n```\n$ webpack --display-error-details\n```\n后面的参数“--display-error-details”是推荐加上的，方便出错时能查阅更详尽的信息（比如 webpack 寻找模块的过程），从而更好定位到问题。\n其他主要的参数有：\n```\n$ webpack --config XXX.js   //使用另一份配置文件（比如webpack.config2.js）来打包\n$ webpack --watch   //监听变动并自动打包\n$ webpack -p    //压缩混淆脚本，这个非常非常重要！\n$ webpack -d    //生成map映射文件，告知哪些模块被最终打包到哪里了\n```\n\n## 实战应用\n\n项目文件夹结构如下图：\n![](https://github.com/Yx1aoq1/Yx1aoq1.github.io/raw/master/images/webpack-1.png)\n\n* src目录下的文件夹存放源代码，dist目录下存放打包过后的代码\n```js\nvar path = require('path');\nvar webpack = require('webpack');\n\nmodule.exports = {\n  entry: './src/index.js', // 以index.js为入口\n  output: {\n    filename: 'js/canvas-filter.bundle.js', // 打包后生成的文件\n    path: path.resolve(__dirname,'./dist') // 使用绝对路径\n  },\n  module: {\n    rules: [\n      { // 使js中能够require css 文件的loader\n        test: /\\.css$/,\n        use: [\n          'style-loader',\n          { loader: 'css-loader', options: { importLoaders: 1 } },\n          'postcss-loader'\n        ]\n      },\n      { // 使得less文件能够解析成css的loader\n        test: /\\.less$/,\n        use: [\n          'style-loader',\n          { loader: 'css-loader', options: { importLoaders: 1 } },\n          'less-loader',\n          'postcss-loader'\n        ]\n      },\n      { // 使得能够正确引用图片文件路径的loader\n        test: /\\.(png|jpg|gif|svg)$/i,\n        loader: 'file-loader'\n      }\n    ]\n  },\n  plugins: [\n    // 再项目中使用jquery时所需要的配置\n    new webpack.ProvidePlugin({\n      $: 'jquery',\n      jQuery: 'jquery',\n      'window.jQuery': 'jquery',\n      'window.$': 'jquery'\n    }),\n    new webpack.HotModuleReplacementPlugin()\n  ],\n  devServer: {\n    // 使用webpack-dev-server，开启本地服务器\n    hot: true,\n    inline: true\n  }\n}\n```\n\n",[[1558699754136,["70431@DESKTOP-QB0HG1K",[[1,334,"## Webpack 基本介绍\n\n▼ **什么是Webpack：**\nwebpack是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。\n我们可以直接使用 require(XXX) 的形式来引入各模块，即使它们可能需要经过编译（比如JSX和sass），但我们无须在上面花费太多心思，因为 webpack 有着各种健全的加载器（loader）在默默处理这些事情。\n\n<!-- more -->"]],[90,90],[334,334]]],[1558699754449,["70431@DESKTOP-QB0HG1K",[[1,334,"\n"]],[334,334],[335,335]]],[1558699755868,["70431@DESKTOP-QB0HG1K",[[1,335,"\n"]],[335,335],[336,336]]],[1558699759467,["70431@DESKTOP-QB0HG1K",[[-1,567,"<!-- more -->"]],[580,580],[567,567]]],[1558699759849,["70431@DESKTOP-QB0HG1K",[[-1,568,"\n"]],[567,567],[566,566]]],[1558699760616,["70431@DESKTOP-QB0HG1K",[[-1,567,"\n"]],[566,566],[565,565]]],[1558699763000,["70431@DESKTOP-QB0HG1K",[[-1,566,"\n"]],[566,566],[565,565]]]],null,"70431@DESKTOP-QB0HG1K"]]}