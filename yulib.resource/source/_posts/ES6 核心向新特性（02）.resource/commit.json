{"compress":true,"commitItems":[["523a90f3-cbed-4aa0-8d6f-38c39c194d1a",1558699063237,"---\ntitle: ES6 核心向新特性（02）\ndate: 2018-03-08 19:56:33\ntags: [JavaScript, ES6]\n---\n## 类\n```js\n// 类声明\nclass Aminal {\n  // 类中只能包含一个名为constructor的特殊方法\n  constructor() {\n    // ...\n  }\n}\n// extends 创建子类\nclass People extends Aminal {\n  constructor(contents = {}) {\n    super(); // 调用父类的构造函数\n    this.name = contents.name;\n    this.family = contents.family;\n  }\n  sayHi() {\n    console.log(`Hello ${this.name} ${this.family}`);\n  }\n}\n\nlet boy = new People({\n  name: 'ouven',\n  family: 'zhang'\n});\n\nboy.sayHi(); // Hello ouven zhang\n```\n\n## 模块 module\n```js\nimport { sayHi } from './people';\nexport default sayHi;\n```\n**注意点**：使用`default`导出时要尽量将其他模板需要使用的部分属性导出，不要导出整个对象，因为这样会导出一些不需要的东西，如果使用模块按需内容导出，部分ECMAScript6的打包工具可以使用静态树分析的方法来自动移除程序运行时不需要的代码。\n\n## 循环与迭代器 Iterator\n在 es6 阶段，除了`do...while`、`for`循环，还可以使用`for...in`来遍历**对象**。Iterator迭代器的加入让遍历数组、对象和集合的方式更加灵活可控，Iterator可以控制每次单步循环触发的时机，不用一次遍历所有的循环。\n\n▼ **`for...of`遍历实现**\n```js\nconst numbers = [1, 2, 3, 4, 5];\n\nfor(let number of numbers) {\n  console.log(number);\n}\n```\n▼ **迭代器遍历数组**\n```js\nconst numbers = [1, 2, 3, 4, 5];\n\nlet iterator = numbers[Symbol.iterator]();\nlet result = iterator.next();\nconsole.log(result.value); // 1\n\nresult = iterator.next();\nconsole.log(result.value); // 2\n\nresult = iterator.next();\nconsole.log(result.value); // 3\n\nresult = iterator.next();\nconsole.log(result.value); // 4\n\nresult = iterator.next();\nconsole.log(result.value); // 5\n```\n▼ **对比**\nIterator 可以在循环开始后任意的地方进行数组的单步循环，当循环迭代中每次单步循环操作都不一样时，使用 Iterator 更加的方便。如果使用`for...of`则需要不断判断执行的次数来执行不同的单步循环。\n▼ **注意点**\n每次 Iterator 调用`next()`都会返回一个对象`{done: false, value: item}`，`done`的属性是布尔值，表示循环遍历是否完成，`value`则是每一步`next()`调用获取到的值。\n\n## 生成器 Generator\n```js\nconst generator = function* () {\n  const numbers = [1, 2, 3, 4, 5];\n  for(let number of numbers) {\n    yield console.log(number);\n  }\n}\n\nlet result = generator();\n\nresult.next(); // 1\n// ...doSomething\nresult.next(); // 2\n// ...doSomething\nresult.next(); // 3\n// ...doSomething\nresult.next(); // 4\n// ...doSomething\nresult.next(); // 5\n// ...doSomething\n```\nGenerator 是针对函数内代码块的执行控制，如果将一个特殊函数的代码使用`yield`关键字来分割成多个不同的代码段，那么每次 Generator 调用`next()`都只会执行`yield`关键字之间的一段代码。Generator 可以认为是一个可中断执行的特殊函数，声明方法是在函数名后面加上`*`来与普通函数区分。\n▼ **注意点**\nGenerator 遇到`yield`关键字会暂停往后执行，但并不表示后面的程序就不执行了。如果`console.log(number)`是一个耗时的工作，那么程序只在 Generator 里面暂停，外面的程序仍会继续执行。\n```js\nconst generator = function* () {\n  const numbers = [1, 2, 3, 4, 5];\n  for(let number of numbers) {\n    yield setTimeout(function() {\n      console.log(number);\n    }, 3000);\n  }\n}\n\nlet result = generator();\nlet done = result.next();\nwhile(!done.done) {\n  done = result.next();\n}\nconsole.log('finish');\n// 输出\nfinish\n1\n2\n3\n4\n5\n```\n\n## 集合类型\n### Set & Map\n▼ **为什么有了数组和对象来进行存储数据还要要使用 Map & Set**\n* 对象的键名一般只能是字符串，而不能是一个对象；\n* 对象没有直接获取属性个数等这些方便操作的方法；\n* 对于对象的任何操作都需要进入对象的内部数据中完成，如查找、删除某个值必须循环遍历对象内部的所有键值对来完成。\n\n▼ **Set的基本用法**\n```js\nconst set = new Set([1, 2, 3, 4, 4]);\n[...set]\n// [1, 2, 3, 4]\n```\nSet 不会添加重复的值，并且可以接受一个数组（或者具有 Iterable 接口的其他数据解构）作为参数，用来初始化。\n▼ **Map的基本用法**\n```js\nconst m = new Map();\nconst o = {p: 'Hello World'};\n\nm.set(o, 'content')\nm.get(o) // \"content\"\n\nm.has(o) // true\nm.delete(o) // true\nm.has(o) // false\n```\nMap 类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以作为键。\n\n### WeakSet & WeakMap\nWeakSet 和 WeakMap 则对应着 Set 和 Map 的优化类型，所以某种程度上，为了让程序开发更加方便，我妈有必要引入集合这类更为高效的类型。WeakSet 和 WeakMap 在生成时有更加严格的限制：WeakSet 只存储对象类型的元素，不能遍历，没有`size`属性；WeakMap 只接受基本类型的值作为键名，没有`keys`、`values`、`entries`等遍历方法，也没有`size`属性。\n▼ **WeakSet的基本用法**\n```js\nconst a = [[1, 2], [3, 4]];\nconst ws = new WeakSet(a);\n// WeakSet {[1, 2], [3, 4]}\n\nconst b = [3, 4];\nconst ws = new WeakSet(b);\n// Uncaught TypeError: Invalid value used in weak set(…)\n```\n▼ **WeakMap的基本用法**\n```js\nconst wm1 = new WeakMap();\nconst key = {foo: 1};\nwm1.set(key, 2);\nwm1.get(key) // 2\n\nconst map = new WeakMap();\nmap.set(1, 2)\n// TypeError: 1 is not an object!\n```\n\n## 数组或对象循环遍历的方法对比\n### for/while 循环语句\n```js\nlet arr = [1, 2, 3];\nfor(let = 0, len = arr.length; i < len; i++) {\n  console.log(arr[i]);\n}\n```\n所有语言都会涉及的循环。不过单纯的for/while能力有限，而且性能上也堪忧。而且必须借助特定的结构才能遍历数据结构。\n### forEach 方法\n```js\n[1, 2, 3].forEach(function(value, index) {\n  console.log(index + ':' + value);\n});\n```\n**优点：**可以同时获取index和value，不必再像以前遍历数组那样，还要再在for去获取值。\n**缺点：**仅支持数组。而且一旦调用，会完全遍历一次，break, continue, return都无效。\n**应用场景：**仅在遍历数组的时候使用。\n### for...in 语句\n```js\nlet obj = {a: 1, b: 2,c: 3};\nfor(let key in obj) {\n  console.log(obj[key]);\n}\n```\n**优点：**它可以支持所有对象类型的数据，包括数组，甚至是函数等，而且语法简单。且不同于`forEach`方法，它可以与break、continue和return配合使用。\n**缺点：**循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。主要是为遍历对象而设计的，不适用于遍历数组。\n**应用场景：** 遍历常用对象（如例子）\n### for...of 语句\n```js\nvar list = new Map();\nlist.set('a', 1);\nlist.set('b', 2);\nlist.set('c', 3);\nfor(var [key, value] of list) {\n  console.log(key + ':' + value);\n}\n```\n`for...of`是ES6新增的语法，它是基于ES6新增的Iterator和Symbol开发的。\n**优点：**在遍历中直接取值。感觉上和`for...in`形成互补，一个在遍历中取键名，另一个取值。另一个优点是，它可以遍历任何部署了 Iterator 接口的数据结构（如 Set 和 Map），甚至是非 JavaScript 的数据类型，即自己定义的数据结构。\n**缺点：**对于普通的对象，`for...of`结构不能直接使用，会报错，必须部署了 Iterator 接口后才能使用。\n**应用场景：**推荐应用于Map上的遍历。\n### map() & filter() & reduce()\n```js\nvar arr = [1, 2, 3];\n\narr.map(function(element) {\n  return element + 1;\n});\n// [2, 3, 4]\n\narr.filter(function(element) {\n  return element > 1;\n})\n// [2, 3]\n\nvar result = arr.reduce(function(prev, element) {\n  return prev + element;\n}, 0);\n// 5\n```\n**应用场景：**这三个方法都是是 Array 中的方法，常用于数组中的数值的处理。`map`主要用于对存储的数据进行加工，`filter`偏向于过滤数据，`reduce`用于计算总和。\n\n学习参考：\n[ECMAScript 6入门——阮一峰](http://es6.ruanyifeng.com/)\n《现代前端技术解析》",[[1558699061916,["70431@DESKTOP-QB0HG1K",[[1,528,"\n"]],[526,526],[527,527]]],[1558699062281,["70431@DESKTOP-QB0HG1K",[[1,529,"\n"]],[527,527],[528,528]]],[1558699062576,["70431@DESKTOP-QB0HG1K",[[1,528,"<!-- more -->"]],[528,528],[541,541]]]],null,"70431@DESKTOP-QB0HG1K"],["45714bf9-6f02-4021-bb44-bbd3e31f1743",1558700002895,"---\ntitle: ES6 核心向新特性（02）\ndate: 2018-03-08 19:56:33\ntags: [JavaScript, ES6]\n---\n## 类\n```js\n// 类声明\nclass Aminal {\n  // 类中只能包含一个名为constructor的特殊方法\n  constructor() {\n    // ...\n  }\n}\n// extends 创建子类\nclass People extends Aminal {\n  constructor(contents = {}) {\n    super(); // 调用父类的构造函数\n    this.name = contents.name;\n    this.family = contents.family;\n  }\n  sayHi() {\n    console.log(`Hello ${this.name} ${this.family}`);\n  }\n}\n\nlet boy = new People({\n  name: 'ouven',\n  family: 'zhang'\n});\n\nboy.sayHi(); // Hello ouven zhang\n```\n\n<!-- more -->\n\n## 模块 module\n```js\nimport { sayHi } from './people';\nexport default sayHi;\n```\n**注意点**：使用`default`导出时要尽量将其他模板需要使用的部分属性导出，不要导出整个对象，因为这样会导出一些不需要的东西，如果使用模块按需内容导出，部分ECMAScript6的打包工具可以使用静态树分析的方法来自动移除程序运行时不需要的代码。\n\n## 循环与迭代器 Iterator\n在 es6 阶段，除了`do...while`、`for`循环，还可以使用`for...in`来遍历**对象**。Iterator迭代器的加入让遍历数组、对象和集合的方式更加灵活可控，Iterator可以控制每次单步循环触发的时机，不用一次遍历所有的循环。\n\n▼ **`for...of`遍历实现**\n```js\nconst numbers = [1, 2, 3, 4, 5];\n\nfor(let number of numbers) {\n  console.log(number);\n}\n```\n▼ **迭代器遍历数组**\n```js\nconst numbers = [1, 2, 3, 4, 5];\n\nlet iterator = numbers[Symbol.iterator]();\nlet result = iterator.next();\nconsole.log(result.value); // 1\n\nresult = iterator.next();\nconsole.log(result.value); // 2\n\nresult = iterator.next();\nconsole.log(result.value); // 3\n\nresult = iterator.next();\nconsole.log(result.value); // 4\n\nresult = iterator.next();\nconsole.log(result.value); // 5\n```\n▼ **对比**\nIterator 可以在循环开始后任意的地方进行数组的单步循环，当循环迭代中每次单步循环操作都不一样时，使用 Iterator 更加的方便。如果使用`for...of`则需要不断判断执行的次数来执行不同的单步循环。\n▼ **注意点**\n每次 Iterator 调用`next()`都会返回一个对象`{done: false, value: item}`，`done`的属性是布尔值，表示循环遍历是否完成，`value`则是每一步`next()`调用获取到的值。\n\n## 生成器 Generator\n```js\nconst generator = function* () {\n  const numbers = [1, 2, 3, 4, 5];\n  for(let number of numbers) {\n    yield console.log(number);\n  }\n}\n\nlet result = generator();\n\nresult.next(); // 1\n// ...doSomething\nresult.next(); // 2\n// ...doSomething\nresult.next(); // 3\n// ...doSomething\nresult.next(); // 4\n// ...doSomething\nresult.next(); // 5\n// ...doSomething\n```\nGenerator 是针对函数内代码块的执行控制，如果将一个特殊函数的代码使用`yield`关键字来分割成多个不同的代码段，那么每次 Generator 调用`next()`都只会执行`yield`关键字之间的一段代码。Generator 可以认为是一个可中断执行的特殊函数，声明方法是在函数名后面加上`*`来与普通函数区分。\n▼ **注意点**\nGenerator 遇到`yield`关键字会暂停往后执行，但并不表示后面的程序就不执行了。如果`console.log(number)`是一个耗时的工作，那么程序只在 Generator 里面暂停，外面的程序仍会继续执行。\n```js\nconst generator = function* () {\n  const numbers = [1, 2, 3, 4, 5];\n  for(let number of numbers) {\n    yield setTimeout(function() {\n      console.log(number);\n    }, 3000);\n  }\n}\n\nlet result = generator();\nlet done = result.next();\nwhile(!done.done) {\n  done = result.next();\n}\nconsole.log('finish');\n// 输出\nfinish\n1\n2\n3\n4\n5\n```\n\n## 集合类型\n### Set & Map\n▼ **为什么有了数组和对象来进行存储数据还要要使用 Map & Set**\n* 对象的键名一般只能是字符串，而不能是一个对象；\n* 对象没有直接获取属性个数等这些方便操作的方法；\n* 对于对象的任何操作都需要进入对象的内部数据中完成，如查找、删除某个值必须循环遍历对象内部的所有键值对来完成。\n\n▼ **Set的基本用法**\n```js\nconst set = new Set([1, 2, 3, 4, 4]);\n[...set]\n// [1, 2, 3, 4]\n```\nSet 不会添加重复的值，并且可以接受一个数组（或者具有 Iterable 接口的其他数据解构）作为参数，用来初始化。\n▼ **Map的基本用法**\n```js\nconst m = new Map();\nconst o = {p: 'Hello World'};\n\nm.set(o, 'content')\nm.get(o) // \"content\"\n\nm.has(o) // true\nm.delete(o) // true\nm.has(o) // false\n```\nMap 类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以作为键。\n\n### WeakSet & WeakMap\nWeakSet 和 WeakMap 则对应着 Set 和 Map 的优化类型，所以某种程度上，为了让程序开发更加方便，我妈有必要引入集合这类更为高效的类型。WeakSet 和 WeakMap 在生成时有更加严格的限制：WeakSet 只存储对象类型的元素，不能遍历，没有`size`属性；WeakMap 只接受基本类型的值作为键名，没有`keys`、`values`、`entries`等遍历方法，也没有`size`属性。\n▼ **WeakSet的基本用法**\n```js\nconst a = [[1, 2], [3, 4]];\nconst ws = new WeakSet(a);\n// WeakSet {[1, 2], [3, 4]}\n\nconst b = [3, 4];\nconst ws = new WeakSet(b);\n// Uncaught TypeError: Invalid value used in weak set(…)\n```\n▼ **WeakMap的基本用法**\n```js\nconst wm1 = new WeakMap();\nconst key = {foo: 1};\nwm1.set(key, 2);\nwm1.get(key) // 2\n\nconst map = new WeakMap();\nmap.set(1, 2)\n// TypeError: 1 is not an object!\n```\n\n## 数组或对象循环遍历的方法对比\n### for/while 循环语句\n```js\nlet arr = [1, 2, 3];\nfor(let = 0, len = arr.length; i < len; i++) {\n  console.log(arr[i]);\n}\n```\n所有语言都会涉及的循环。不过单纯的for/while能力有限，而且性能上也堪忧。而且必须借助特定的结构才能遍历数据结构。\n### forEach 方法\n```js\n[1, 2, 3].forEach(function(value, index) {\n  console.log(index + ':' + value);\n});\n```\n**优点：**可以同时获取index和value，不必再像以前遍历数组那样，还要再在for去获取值。\n**缺点：**仅支持数组。而且一旦调用，会完全遍历一次，break, continue, return都无效。\n**应用场景：**仅在遍历数组的时候使用。\n### for...in 语句\n```js\nlet obj = {a: 1, b: 2,c: 3};\nfor(let key in obj) {\n  console.log(obj[key]);\n}\n```\n**优点：**它可以支持所有对象类型的数据，包括数组，甚至是函数等，而且语法简单。且不同于`forEach`方法，它可以与break、continue和return配合使用。\n**缺点：**循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。主要是为遍历对象而设计的，不适用于遍历数组。\n**应用场景：** 遍历常用对象（如例子）\n### for...of 语句\n```js\nvar list = new Map();\nlist.set('a', 1);\nlist.set('b', 2);\nlist.set('c', 3);\nfor(var [key, value] of list) {\n  console.log(key + ':' + value);\n}\n```\n`for...of`是ES6新增的语法，它是基于ES6新增的Iterator和Symbol开发的。\n**优点：**在遍历中直接取值。感觉上和`for...in`形成互补，一个在遍历中取键名，另一个取值。另一个优点是，它可以遍历任何部署了 Iterator 接口的数据结构（如 Set 和 Map），甚至是非 JavaScript 的数据类型，即自己定义的数据结构。\n**缺点：**对于普通的对象，`for...of`结构不能直接使用，会报错，必须部署了 Iterator 接口后才能使用。\n**应用场景：**推荐应用于Map上的遍历。\n### map() & filter() & reduce()\n```js\nvar arr = [1, 2, 3];\n\narr.map(function(element) {\n  return element + 1;\n});\n// [2, 3, 4]\n\narr.filter(function(element) {\n  return element > 1;\n})\n// [2, 3]\n\nvar result = arr.reduce(function(prev, element) {\n  return prev + element;\n}, 0);\n// 5\n```\n**应用场景：**这三个方法都是是 Array 中的方法，常用于数组中的数值的处理。`map`主要用于对存储的数据进行加工，`filter`偏向于过滤数据，`reduce`用于计算总和。\n\n学习参考：\n[ECMAScript 6入门——阮一峰](http://es6.ruanyifeng.com/)\n《现代前端技术解析》",[[1558699977238,["70431@DESKTOP-QB0HG1K",[[-1,528,"<!-- more -->"]],[528,541],[528,528]]],[1558699977470,["70431@DESKTOP-QB0HG1K",[[-1,529,"\n"]],[528,528],[527,527]]],[1558699978866,["70431@DESKTOP-QB0HG1K",[[-1,528,"\n"]],[527,527],[526,526]]],[1558699986982,["70431@DESKTOP-QB0HG1K",[[1,80,"\n"]],[79,79],[80,80]]],[1558699987955,["70431@DESKTOP-QB0HG1K",[[1,81,"\n"]],[80,80],[81,81]]],[1558699989126,["70431@DESKTOP-QB0HG1K",[[1,82,"\n"]],[80,80],[81,81]]],[1558699993655,["70431@DESKTOP-QB0HG1K",[[1,81,"<!more>"]],[81,81],[88,88]]],[1558699995945,["70431@DESKTOP-QB0HG1K",[[1,83,"--"]],[83,83],[85,85]]],[1558699998086,["70431@DESKTOP-QB0HG1K",[[1,89,"--"]],[89,89],[91,91]]],[1558700012662,["70431@DESKTOP-QB0HG1K",[[1,80,"## 模块 module\n```js\nimport { sayHi } from './people';\nexport default sayHi;\n```\n**注意点**：使用`default`导出时要尽量将其他模板需要使用的部分属性导出，不要导出整个对象，因为这样会导出一些不需要的东西，如果使用模块按需内容导出，部分ECMAScript6的打包工具可以使用静态树分析的方法来自动移除程序运行时不需要的代码。"]],[80,80],[286,286]]],[1558700015535,["70431@DESKTOP-QB0HG1K",[[1,287,"\n"]],[286,286],[287,287]]]],null,"70431@DESKTOP-QB0HG1K"],["cf1f5b50-4ceb-4db5-8d16-cd835bcc0d74",1558700218136,"---\ntitle: ES6 核心向新特性（02）\ndate: 2018-03-08 19:56:33\ntags: [JavaScript, ES6]\n---\n## 模块 module\n```js\nimport { sayHi } from './people';\nexport default sayHi;\n```\n**注意点**：使用`default`导出时要尽量将其他模板需要使用的部分属性导出，不要导出整个对象，因为这样会导出一些不需要的东西，如果使用模块按需内容导出，部分ECMAScript6的打包工具可以使用静态树分析的方法来自动移除程序运行时不需要的代码。\n\n<!--more-->\n\n## 类\n```js\n// 类声明\nclass Aminal {\n  // 类中只能包含一个名为constructor的特殊方法\n  constructor() {\n    // ...\n  }\n}\n// extends 创建子类\nclass People extends Aminal {\n  constructor(contents = {}) {\n    super(); // 调用父类的构造函数\n    this.name = contents.name;\n    this.family = contents.family;\n  }\n  sayHi() {\n    console.log(`Hello ${this.name} ${this.family}`);\n  }\n}\n\nlet boy = new People({\n  name: 'ouven',\n  family: 'zhang'\n});\n\nboy.sayHi(); // Hello ouven zhang\n```\n\n## 模块 module\n```js\nimport { sayHi } from './people';\nexport default sayHi;\n```\n**注意点**：使用`default`导出时要尽量将其他模板需要使用的部分属性导出，不要导出整个对象，因为这样会导出一些不需要的东西，如果使用模块按需内容导出，部分ECMAScript6的打包工具可以使用静态树分析的方法来自动移除程序运行时不需要的代码。\n\n## 循环与迭代器 Iterator\n在 es6 阶段，除了`do...while`、`for`循环，还可以使用`for...in`来遍历**对象**。Iterator迭代器的加入让遍历数组、对象和集合的方式更加灵活可控，Iterator可以控制每次单步循环触发的时机，不用一次遍历所有的循环。\n\n▼ **`for...of`遍历实现**\n```js\nconst numbers = [1, 2, 3, 4, 5];\n\nfor(let number of numbers) {\n  console.log(number);\n}\n```\n▼ **迭代器遍历数组**\n```js\nconst numbers = [1, 2, 3, 4, 5];\n\nlet iterator = numbers[Symbol.iterator]();\nlet result = iterator.next();\nconsole.log(result.value); // 1\n\nresult = iterator.next();\nconsole.log(result.value); // 2\n\nresult = iterator.next();\nconsole.log(result.value); // 3\n\nresult = iterator.next();\nconsole.log(result.value); // 4\n\nresult = iterator.next();\nconsole.log(result.value); // 5\n```\n▼ **对比**\nIterator 可以在循环开始后任意的地方进行数组的单步循环，当循环迭代中每次单步循环操作都不一样时，使用 Iterator 更加的方便。如果使用`for...of`则需要不断判断执行的次数来执行不同的单步循环。\n▼ **注意点**\n每次 Iterator 调用`next()`都会返回一个对象`{done: false, value: item}`，`done`的属性是布尔值，表示循环遍历是否完成，`value`则是每一步`next()`调用获取到的值。\n\n## 生成器 Generator\n```js\nconst generator = function* () {\n  const numbers = [1, 2, 3, 4, 5];\n  for(let number of numbers) {\n    yield console.log(number);\n  }\n}\n\nlet result = generator();\n\nresult.next(); // 1\n// ...doSomething\nresult.next(); // 2\n// ...doSomething\nresult.next(); // 3\n// ...doSomething\nresult.next(); // 4\n// ...doSomething\nresult.next(); // 5\n// ...doSomething\n```\nGenerator 是针对函数内代码块的执行控制，如果将一个特殊函数的代码使用`yield`关键字来分割成多个不同的代码段，那么每次 Generator 调用`next()`都只会执行`yield`关键字之间的一段代码。Generator 可以认为是一个可中断执行的特殊函数，声明方法是在函数名后面加上`*`来与普通函数区分。\n▼ **注意点**\nGenerator 遇到`yield`关键字会暂停往后执行，但并不表示后面的程序就不执行了。如果`console.log(number)`是一个耗时的工作，那么程序只在 Generator 里面暂停，外面的程序仍会继续执行。\n```js\nconst generator = function* () {\n  const numbers = [1, 2, 3, 4, 5];\n  for(let number of numbers) {\n    yield setTimeout(function() {\n      console.log(number);\n    }, 3000);\n  }\n}\n\nlet result = generator();\nlet done = result.next();\nwhile(!done.done) {\n  done = result.next();\n}\nconsole.log('finish');\n// 输出\nfinish\n1\n2\n3\n4\n5\n```\n\n## 集合类型\n### Set & Map\n▼ **为什么有了数组和对象来进行存储数据还要要使用 Map & Set**\n* 对象的键名一般只能是字符串，而不能是一个对象；\n* 对象没有直接获取属性个数等这些方便操作的方法；\n* 对于对象的任何操作都需要进入对象的内部数据中完成，如查找、删除某个值必须循环遍历对象内部的所有键值对来完成。\n\n▼ **Set的基本用法**\n```js\nconst set = new Set([1, 2, 3, 4, 4]);\n[...set]\n// [1, 2, 3, 4]\n```\nSet 不会添加重复的值，并且可以接受一个数组（或者具有 Iterable 接口的其他数据解构）作为参数，用来初始化。\n▼ **Map的基本用法**\n```js\nconst m = new Map();\nconst o = {p: 'Hello World'};\n\nm.set(o, 'content')\nm.get(o) // \"content\"\n\nm.has(o) // true\nm.delete(o) // true\nm.has(o) // false\n```\nMap 类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以作为键。\n\n### WeakSet & WeakMap\nWeakSet 和 WeakMap 则对应着 Set 和 Map 的优化类型，所以某种程度上，为了让程序开发更加方便，我妈有必要引入集合这类更为高效的类型。WeakSet 和 WeakMap 在生成时有更加严格的限制：WeakSet 只存储对象类型的元素，不能遍历，没有`size`属性；WeakMap 只接受基本类型的值作为键名，没有`keys`、`values`、`entries`等遍历方法，也没有`size`属性。\n▼ **WeakSet的基本用法**\n```js\nconst a = [[1, 2], [3, 4]];\nconst ws = new WeakSet(a);\n// WeakSet {[1, 2], [3, 4]}\n\nconst b = [3, 4];\nconst ws = new WeakSet(b);\n// Uncaught TypeError: Invalid value used in weak set(…)\n```\n▼ **WeakMap的基本用法**\n```js\nconst wm1 = new WeakMap();\nconst key = {foo: 1};\nwm1.set(key, 2);\nwm1.get(key) // 2\n\nconst map = new WeakMap();\nmap.set(1, 2)\n// TypeError: 1 is not an object!\n```\n\n## 数组或对象循环遍历的方法对比\n### for/while 循环语句\n```js\nlet arr = [1, 2, 3];\nfor(let = 0, len = arr.length; i < len; i++) {\n  console.log(arr[i]);\n}\n```\n所有语言都会涉及的循环。不过单纯的for/while能力有限，而且性能上也堪忧。而且必须借助特定的结构才能遍历数据结构。\n### forEach 方法\n```js\n[1, 2, 3].forEach(function(value, index) {\n  console.log(index + ':' + value);\n});\n```\n**优点：**可以同时获取index和value，不必再像以前遍历数组那样，还要再在for去获取值。\n**缺点：**仅支持数组。而且一旦调用，会完全遍历一次，break, continue, return都无效。\n**应用场景：**仅在遍历数组的时候使用。\n### for...in 语句\n```js\nlet obj = {a: 1, b: 2,c: 3};\nfor(let key in obj) {\n  console.log(obj[key]);\n}\n```\n**优点：**它可以支持所有对象类型的数据，包括数组，甚至是函数等，而且语法简单。且不同于`forEach`方法，它可以与break、continue和return配合使用。\n**缺点：**循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。主要是为遍历对象而设计的，不适用于遍历数组。\n**应用场景：** 遍历常用对象（如例子）\n### for...of 语句\n```js\nvar list = new Map();\nlist.set('a', 1);\nlist.set('b', 2);\nlist.set('c', 3);\nfor(var [key, value] of list) {\n  console.log(key + ':' + value);\n}\n```\n`for...of`是ES6新增的语法，它是基于ES6新增的Iterator和Symbol开发的。\n**优点：**在遍历中直接取值。感觉上和`for...in`形成互补，一个在遍历中取键名，另一个取值。另一个优点是，它可以遍历任何部署了 Iterator 接口的数据结构（如 Set 和 Map），甚至是非 JavaScript 的数据类型，即自己定义的数据结构。\n**缺点：**对于普通的对象，`for...of`结构不能直接使用，会报错，必须部署了 Iterator 接口后才能使用。\n**应用场景：**推荐应用于Map上的遍历。\n### map() & filter() & reduce()\n```js\nvar arr = [1, 2, 3];\n\narr.map(function(element) {\n  return element + 1;\n});\n// [2, 3, 4]\n\narr.filter(function(element) {\n  return element > 1;\n})\n// [2, 3]\n\nvar result = arr.reduce(function(prev, element) {\n  return prev + element;\n}, 0);\n// 5\n```\n**应用场景：**这三个方法都是是 Array 中的方法，常用于数组中的数值的处理。`map`主要用于对存储的数据进行加工，`filter`偏向于过滤数据，`reduce`用于计算总和。\n\n学习参考：\n[ECMAScript 6入门——阮一峰](http://es6.ruanyifeng.com/)\n《现代前端技术解析》",[[1558700217504,["70431@DESKTOP-QB0HG1K",[[1,52,"categories: JS相关\n"],[-1,58,"["],[1,59,"\n  - "],[-1,69,","],[1,70,"\n  -"],[-1,74,"]"]],[52,75],[98,98]]]],null,"70431@DESKTOP-QB0HG1K"]]}