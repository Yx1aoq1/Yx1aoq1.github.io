{"compress":true,"commitItems":[["63c568b4-3ca7-4994-b5bb-f1e2816c83f3",1558699039996,"---\ntitle: JS变量计算\ndate: 2017-08-24 20:53:29\ntags: [JavaScript]\n---\n## typeof 运算符\n\n```javascript\ntypeof undefined // undefined\ntypeof 'abc' // string\ntypeof 123 // number\ntypeof true // boolean\ntypeof {} // object\ntypeof [] // object\ntypeof null // object\ntypeof console.log // function\n```\n\n## 变量运算 - 强制类型转换\n\n### 字符串拼接\n\n```javascript\nvar a = 100 + 10 // 110\nvar b = 100 + '10' // '10010'\n```\n当使用减运算时：\n```javascript\nvar c = '100' - 10 // 90\n```\n\n### == 运算符\n\n```javascript\n100 == '100' // true\n0 == '' // true\nnull == undefined // true\n```\n`==`与`===`的区别：`===`是严格等于，只有类型完全相同才会返回`true`\n```javascript\nnull === null\nundefined === undefined\nnull === undefined // false\nNaN === NaN // false\n```\n什么时候用`==`什么时候用`===`：jQuery源码中推荐写法，只有下述情况才用`==`，其他时候都用`===`。\n```javascript\nif(a == null) {\n  // 这里相当于 a === null || a === undefined\n}\n```\n\n### if语句\n\n```javascript\nvar a = true;\nif(a) { //... } \n\nvar b = 100; // true\nif(b) { //... }\n\nvar c = ''; // false\nif(c) { //... }\n```\n`if`中被判定为`false`的几个值：`0`,`NaN`,`''`,`null`,`undefined`\n\n### 逻辑运算\n\n```javascript\nconsole.log(10 && 0) // 0\nconsole.log('' || 'abc') // 'abc'\nconsole.log(!window.abc) // true\n\n// 判断一个变量会被当做 true 还是 false\nvar a = 100;\nconsole.log(!!a) //true\n```",[[1558699038359,["70431@DESKTOP-QB0HG1K",[[1,291,"\n"]],[289,289],[290,290]]],[1558699038658,["70431@DESKTOP-QB0HG1K",[[1,292,"\n"]],[290,290],[291,291]]],[1558699039199,["70431@DESKTOP-QB0HG1K",[[1,291,"<!-- more -->"]],[291,291],[304,304]]]],null,"70431@DESKTOP-QB0HG1K"],["7820b3d5-497e-4b42-978c-44e53b661663",1558699912477,"---\ntitle: JS变量计算\ndate: 2017-08-24 20:53:29\ntags: [JavaScript]\n---\n## typeof 运算符\n\n```javascript\ntypeof undefined // undefined\ntypeof 'abc' // string\ntypeof 123 // number\ntypeof true // boolean\ntypeof {} // object\ntypeof [] // object\ntypeof null // object\ntypeof console.log // function\n```\n\n<!-- more -->\n\n## 变量运算 - 强制类型转换\n\n### 字符串拼接\n\n```javascript\nvar a = 100 + 10 // 110\nvar b = 100 + '10' // '10010'\n```\n当使用减运算时：\n```javascript\nvar c = '100' - 10 // 90\n```\n\n### == 运算符\n\n```javascript\n100 == '100' // true\n0 == '' // true\nnull == undefined // true\n```\n`==`与`===`的区别：`===`是严格等于，只有类型完全相同才会返回`true`\n```javascript\nnull === null\nundefined === undefined\nnull === undefined // false\nNaN === NaN // false\n```\n什么时候用`==`什么时候用`===`：jQuery源码中推荐写法，只有下述情况才用`==`，其他时候都用`===`。\n```javascript\nif(a == null) {\n  // 这里相当于 a === null || a === undefined\n}\n```\n\n### if语句\n\n```javascript\nvar a = true;\nif(a) { //... } \n\nvar b = 100; // true\nif(b) { //... }\n\nvar c = ''; // false\nif(c) { //... }\n```\n`if`中被判定为`false`的几个值：`0`,`NaN`,`''`,`null`,`undefined`\n\n### 逻辑运算\n\n```javascript\nconsole.log(10 && 0) // 0\nconsole.log('' || 'abc') // 'abc'\nconsole.log(!window.abc) // true\n\n// 判断一个变量会被当做 true 还是 false\nvar a = 100;\nconsole.log(!!a) //true\n```",[[1558699908147,["70431@DESKTOP-QB0HG1K",[[1,306,"\n"]],[304,304],[305,305]]],[1558699908576,["70431@DESKTOP-QB0HG1K",[[1,307,"\n"]],[305,305],[306,306]]],[1558699908869,["70431@DESKTOP-QB0HG1K",[[1,306,"## typeof 运算符\n\n```javascript\ntypeof undefined // undefined\ntypeof 'abc' // string\ntypeof 123 // number\ntypeof true // boolean\ntypeof {} // object\ntypeof [] // object\ntypeof null // object\ntypeof console.log // function\n```\n\n<!-- more -->"]],[306,306],[543,543]]],[1558699910600,["70431@DESKTOP-QB0HG1K",[[-1,530,"<!-- more -->"]],[530,543],[530,530]]],[1558699910916,["70431@DESKTOP-QB0HG1K",[[-1,531,"\n"]],[530,530],[529,529]]],[1558699911389,["70431@DESKTOP-QB0HG1K",[[-1,530,"\n"]],[529,529],[528,528]]]],null,"70431@DESKTOP-QB0HG1K"],["f63a79d3-a8b0-45e1-b2c0-b701e6a87fca",1558700160708,"---\ntitle: JS变量计算\ndate: 2017-08-24 20:53:29\ntags: [JavaScript]\n---\n## typeof 运算符\n\n```javascript\ntypeof undefined // undefined\ntypeof 'abc' // string\ntypeof 123 // number\ntypeof true // boolean\ntypeof {} // object\ntypeof [] // object\ntypeof null // object\ntypeof console.log // function\n```\n\n<!-- more -->\n\n## typeof 运算符\n\n```javascript\ntypeof undefined // undefined\ntypeof 'abc' // string\ntypeof 123 // number\ntypeof true // boolean\ntypeof {} // object\ntypeof [] // object\ntypeof null // object\ntypeof console.log // function\n```\n\n## 变量运算 - 强制类型转换\n\n### 字符串拼接\n\n```javascript\nvar a = 100 + 10 // 110\nvar b = 100 + '10' // '10010'\n```\n当使用减运算时：\n```javascript\nvar c = '100' - 10 // 90\n```\n\n### == 运算符\n\n```javascript\n100 == '100' // true\n0 == '' // true\nnull == undefined // true\n```\n`==`与`===`的区别：`===`是严格等于，只有类型完全相同才会返回`true`\n```javascript\nnull === null\nundefined === undefined\nnull === undefined // false\nNaN === NaN // false\n```\n什么时候用`==`什么时候用`===`：jQuery源码中推荐写法，只有下述情况才用`==`，其他时候都用`===`。\n```javascript\nif(a == null) {\n  // 这里相当于 a === null || a === undefined\n}\n```\n\n### if语句\n\n```javascript\nvar a = true;\nif(a) { //... } \n\nvar b = 100; // true\nif(b) { //... }\n\nvar c = ''; // false\nif(c) { //... }\n```\n`if`中被判定为`false`的几个值：`0`,`NaN`,`''`,`null`,`undefined`\n\n### 逻辑运算\n\n```javascript\nconsole.log(10 && 0) // 0\nconsole.log('' || 'abc') // 'abc'\nconsole.log(!window.abc) // true\n\n// 判断一个变量会被当做 true 还是 false\nvar a = 100;\nconsole.log(!!a) //true\n```",[[1558700160083,["70431@DESKTOP-QB0HG1K",[[1,44,"categories: JS相关\n"],[-1,50,"["],[1,51,"\n  - "],[-1,61,"]"]],[44,62],[82,82]]]],null,"70431@DESKTOP-QB0HG1K"]]}